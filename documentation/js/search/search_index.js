var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.399,1,2.523]],["body/controllers/AppController.html",[0,2.432,1,4.386,2,2.041,3,0.295,4,0.261,5,0.261,6,4.559,7,0.393,8,0.02,9,0.979,10,3.987,11,4.559,12,0.295,13,0.09,14,4.559,15,1.742,16,0.017,17,0.017]],["title/modules/AppModule.html",[18,1.258,19,2.523]],["body/modules/AppModule.html",[1,3.562,2,1.686,3,0.169,4,0.15,5,0.252,7,0.437,8,0.02,9,0.562,10,3.659,11,2.615,12,0.169,13,0.051,16,0.012,17,0.012,18,1.776,19,4.991,20,1.386,21,1.386,22,1.567,23,1.567,24,1.386,25,2.643,26,1.567,27,2.615,28,2.615,29,2.615,30,3.659,31,3.951,32,3.659,33,3.951,34,3.659,35,3.41,36,2.256,37,1.567,38,1.472,39,2.327,40,3.031,41,3.052,42,3.052,43,3.052,44,3.052,45,1.94,46,1.237,47,3.052,48,1.674,49,1.567,50,3.052,51,3.764,52,4.825,53,1.94,54,3.052,55,4.394,56,3.052,57,4.394,58,3.052,59,4.394,60,3.052,61,1.674,62,4.294,63,2.615,64,3.052,65,3.052,66,1.472,67,2.615,68,4.394,69,1.386,70,3.052,71,4.394,72,3.052,73,3.052,74,2.615,75,3.052,76,3.052,77,4.394,78,3.052,79,2.615,80,3.052,81,3.052,82,1.053,83,3.052,84,0.368,85,3.052,86,1.797,87,0.999,88,0.949,89,3.052,90,3.052,91,3.052,92,3.052,93,3.052,94,3.052,95,3.052,96,3.052,97,3.052,98,1.567,99,3.052,100,3.052,101,3.052,102,2.615,103,3.052]],["title/injectables/AppService.html",[10,2.146,104,0.671]],["body/injectables/AppService.html",[3,0.287,4,0.254,5,0.254,7,0.32,8,0.02,9,0.952,10,3.67,12,0.287,13,0.087,16,0.017,17,0.017,104,1.147,105,1.881,106,4.432,107,0.502,108,1.841,109,6.947,110,0.71,111,5.173,112,1.527,113,2.15,114,1.608,115,4.432,116,5.173]],["title/controllers/AuthController.html",[0,1.399,117,2.523]],["body/controllers/AuthController.html",[0,1.561,2,1.561,3,0.226,4,0.2,5,0.2,7,0.394,8,0.02,9,0.749,12,0.226,13,0.069,14,3.487,15,1.332,16,0.014,17,0.014,84,0.49,88,1.265,107,0.395,108,1.582,110,0.558,112,1.202,114,1.265,117,3.707,118,3.487,119,2.587,120,3.487,121,2.066,122,2.428,123,5.179,124,3.103,125,3.999,126,1.142,127,2.587,128,4.07,129,4.145,130,1.428,131,5.359,132,3.155,133,5.359,134,4.07,135,4.07,136,1.265,137,1.085,138,0.835,139,2.396,140,2.396,141,3.286,142,3.487,143,3.103,144,3.406,145,3.406,146,2.587,147,1.332,148,4.07,149,4.07,150,1.404,151,2.587,152,1.963,153,4.07,154,4.07,155,4.07]],["title/modules/AuthModule.html",[18,1.258,30,2.146]],["body/modules/AuthModule.html",[2,1.998,3,0.216,4,0.191,5,0.191,7,0.424,8,0.02,9,0.718,12,0.216,13,0.088,16,0.014,17,0.014,18,2.023,20,1.771,21,1.771,22,2.002,23,2.002,24,1.771,25,3.011,26,3.011,30,4.193,35,2.857,36,2.674,37,2.002,38,1.88,40,2.296,117,4.058,141,3.968,142,3.341,156,3.341,157,3.341,158,3.341,159,3.819,160,3.951,161,3.9,162,3.066,163,3.9,164,3.341,165,3.9,166,3.31,167,3.9,168,3.9,169,3.341,170,3.31,171,3.9,172,3.9,173,3.341,174,3.9,175,3.9,176,3.9,177,3.9,178,3.9,179,3.9]],["title/injectables/AuthService.html",[104,0.671,141,2]],["body/injectables/AuthService.html",[3,0.207,4,0.184,5,0.184,7,0.398,8,0.02,9,0.689,12,0.207,13,0.063,15,1.659,16,0.013,17,0.013,66,1.805,82,1.981,84,0.61,87,1.225,104,0.933,105,1.361,107,0.363,108,1.496,110,0.788,112,1.496,114,1.575,121,2.287,122,2.328,123,4.904,124,3.863,125,3.787,136,1.575,137,1.35,138,1.04,139,2.203,141,2.779,143,2.853,150,2.123,160,3.624,162,2.203,170,2.379,180,3.206,181,6.157,182,2.853,183,3.326,184,5.745,185,3.743,186,3.743,187,3.863,188,3.22,189,3.743,190,3.743,191,2.853,192,2.589,193,3.743,194,2.589,195,1.842,196,1.604,197,3.743]],["title/injectables/BryptProvider.html",[104,0.671,166,2.317]],["body/injectables/BryptProvider.html",[3,0.208,4,0.184,5,0.184,7,0.357,8,0.02,9,0.692,12,0.208,13,0.086,16,0.014,17,0.014,61,2.063,84,0.612,98,3.41,104,0.936,105,1.368,107,0.365,108,1.501,110,0.698,112,1.501,113,2.44,114,1.58,122,2.691,136,1.58,137,1.355,138,1.043,159,2.789,166,3.231,196,2.469,198,3.223,199,4.934,200,4.356,201,3.223,202,5.69,203,5.285,204,3.762,205,4.356,206,4.356,207,2.61,208,2.5,209,4.356,210,3.762,211,4.356,212,5.084,213,3.762,214,4.356,215,3.223,216,3.762,217,5.76,218,3.762,219,3.762,220,3.762,221,3.762,222,3.762]],["title/classes/CreateManyUsersDto.html",[13,0.061,223,2.146]],["body/classes/CreateManyUsersDto.html",[3,0.247,4,0.219,5,0.219,7,0.408,8,0.02,12,0.247,13,0.106,16,0.015,17,0.015,66,3.179,84,0.82,87,1.46,107,0.433,110,0.612,126,1.251,147,1.46,223,3.347,224,1.711,225,4.335,226,3.614,227,3.821,228,1.679,229,3.685,230,3.179,231,3.821,232,5.687,233,3.934,234,4.872,235,4.46,236,4.46,237,5.687,238,4.872,239,4.872,240,1.807,241,1.538,242,2.626,243,2.835,244,3.119,245,3.821]],["title/classes/CreatePostDto.html",[13,0.061,246,2.146]],["body/classes/CreatePostDto.html",[3,0.108,4,0.096,5,0.096,7,0.323,8,0.02,12,0.108,13,0.066,16,0.008,17,0.008,48,1.069,66,2.515,74,1.67,79,1.67,84,0.826,88,1.388,107,0.189,110,0.859,113,2.16,126,1.757,130,1.815,138,1.286,147,0.638,152,2.357,224,0.748,228,1.153,231,1.67,233,3.09,234,2.675,238,2.675,239,2.675,240,0.79,243,1.239,244,3.004,245,2.675,246,1.838,247,5.451,248,1.239,249,3.906,250,4.468,251,3.346,252,2.978,253,4.339,254,3.346,255,3.381,256,3.789,257,3.106,258,4.187,259,1.388,260,3.122,261,3.263,262,1.949,263,1.949,264,3.381,265,1.949,266,1.949,267,2.299,268,1.838,269,1.949,270,1.949,271,2.675,272,2.38,273,1.67,274,1.949,275,2.629,276,3.122,277,1.949,278,3.906,279,1.713,280,1.949,281,1.949,282,1.949,283,3.122,284,3.826,285,4.467,286,2.702,287,1.603,288,1.949,289,1.949,290,2.629,291,2.675,292,3.122,293,3.122,294,1.949,295,1.949,296,2.38,297,1.486,298,1.486,299,1.67,300,1.949,301,2.675,302,2.675,303,2.675,304,2.675,305,3.405,306,3.405,307,1.949,308,3.405,309,3.826,310,3.826,311,2.38,312,2.978,313,1.949,314,3.726,315,1.949,316,1.949,317,2.675,318,1.338,319,1.949,320,1.949,321,2.482,322,3.122,323,3.122,324,3.09,325,1.949,326,1.949,327,1.949,328,1.486,329,1.949,330,2.702,331,3.122,332,2.38,333,3.224,334,3.004,335,3.381,336,2.675,337,1.486,338,1.67,339,1.67,340,1.67,341,1.67,342,1.486,343,1.486,344,3.789,345,2.38,346,1.949,347,2.143,348,1.949,349,3.346,350,1.949,351,1.67,352,1.67,353,1.949,354,1.486,355,1.486,356,1.486,357,1.67,358,1.67,359,1.949,360,1.486,361,1.486,362,2.38,363,1.949,364,1.949,365,3.122,366,1.949]],["title/classes/CreateTagDto.html",[13,0.061,367,2.317]],["body/classes/CreateTagDto.html",[3,0.176,4,0.155,5,0.155,7,0.28,8,0.02,12,0.176,13,0.076,16,0.012,17,0.012,84,0.78,107,0.308,110,0.831,113,2.357,126,1.699,130,1.861,137,1.614,138,1.292,147,1.037,224,1.216,228,1.333,240,1.284,244,2.884,255,4.19,256,4.482,261,3.296,264,3.638,267,2.657,268,3.373,271,3.867,272,3.441,273,2.715,296,3.441,297,2.416,298,2.416,299,2.715,301,3.867,302,3.867,303,3.867,304,3.867,305,3.441,306,3.441,308,4.368,309,4.909,310,4.909,311,3.441,312,3.441,332,3.441,333,3.095,334,3.143,335,3.964,336,3.867,337,2.416,338,2.715,339,2.715,344,3.964,345,2.416,347,1.738,351,2.715,352,2.715,354,2.416,355,2.416,356,2.416,357,2.715,358,2.715,367,2.869,368,5.393,369,2.715,370,4.504,371,3.169,372,3.169,373,3.169,374,2.177,375,3.169,376,3.169,377,3.169,378,3.169,379,3.169,380,3.169,381,3.169,382,3.169]],["title/classes/CreateUserDto.html",[13,0.061,230,1.758]],["body/classes/CreateUserDto.html",[3,0.19,4,0.168,5,0.168,7,0.295,8,0.02,12,0.19,13,0.08,16,0.013,17,0.013,84,0.714,98,3.4,107,0.332,110,0.813,113,2.329,126,1.663,130,1.58,137,1.58,138,0.978,147,1.121,224,1.314,225,4.752,228,1.407,230,2.299,240,1.388,244,3.253,259,1.482,261,3.257,264,2.369,267,3.228,268,3.491,305,4.52,306,3.634,308,4.52,311,3.634,321,2.176,324,2.369,333,3.491,334,2.615,335,4.313,337,2.61,344,3.298,345,2.61,383,2.61,384,3.419,385,4.698,386,4.698,387,3.424,388,5.341,389,3.424,390,4.767,391,3.424,392,3.424,393,4.767,394,4.767,395,3.424,396,3.424,397,3.424,398,3.424,399,3.424,400,4.767,401,4.767,402,5.08,403,4.767,404,3.424,405,4.084,406,4.767,407,3.424,408,2.934,409,4.767,410,3.424,411,3.424]],["title/injectables/FindUserByEmailProvider.html",[104,0.671,412,2.146]],["body/injectables/FindUserByEmailProvider.html",[3,0.198,4,0.175,5,0.175,7,0.374,8,0.02,9,0.657,12,0.198,13,0.06,15,1.169,16,0.013,17,0.013,46,1.447,82,1.232,84,0.591,87,2.365,104,0.903,105,1.299,107,0.347,108,1.449,110,0.673,112,1.055,113,1.934,114,1.526,121,1.934,122,2.272,136,1.526,137,1.308,138,1.007,150,2.082,195,1.299,196,1.531,208,1.989,384,3.587,412,2.889,413,4.804,414,3.06,415,4.205,416,3.06,417,3.25,418,3.572,419,3.742,420,4.205,421,3.572,422,3.742,423,3.119,424,4.908,425,2.103,426,2.103,427,1.37,428,2.723,429,2.889,430,3.564,431,3.06,432,2.27,433,3.119,434,3.564,435,1.989,436,3.06,437,2.27,438,3.396,439,2.471,440,3.301,441,3.06,442,2.723]],["title/classes/GetPostBaseDto.html",[13,0.061,443,2.523]],["body/classes/GetPostBaseDto.html",[3,0.252,4,0.223,5,0.223,7,0.391,8,0.02,12,0.252,13,0.106,16,0.015,17,0.015,84,0.693,107,0.441,110,0.789,126,1.613,138,1.362,147,1.487,224,1.742,228,1.698,240,1.841,248,2.887,290,3.907,328,4.813,334,3.463,443,4.368,444,4.813,445,5.409,446,5.409,447,5.752,448,4.542,449,4.542,450,4.928,451,3.386,452,3.142,453,3.462,454,2.674,455,3.142]],["title/classes/GetPostDto.html",[13,0.061,454,2.146]],["body/classes/GetPostDto.html",[3,0.272,4,0.24,5,0.24,7,0.405,8,0.02,12,0.272,13,0.11,16,0.016,17,0.016,147,1.604,224,1.88,240,1.986,248,3.115,290,3.551,328,4.982,334,3.585,443,4.521,444,3.736,445,4.199,446,4.199,450,5.599,451,3.847,452,3.39,453,3.736,454,3.551,455,4.173]],["title/classes/GetUserParamDto.html",[13,0.061,456,2.317]],["body/classes/GetUserParamDto.html",[3,0.253,4,0.224,5,0.224,7,0.392,8,0.02,12,0.253,13,0.107,16,0.015,17,0.015,84,0.763,87,1.89,107,0.443,110,0.627,126,1.282,130,1.218,138,1.299,147,1.496,207,2.346,224,1.753,228,1.705,229,3.399,240,1.852,243,2.904,259,1.968,261,2.785,264,3.162,268,3.399,284,3.915,318,2.94,330,3.995,334,3.168,344,3.995,456,3.67,457,4.947,458,3.915,459,4.57,460,4.57,461,3.484,462,4.57]],["title/injectables/HashingProvider.html",[104,0.671,159,2]],["body/injectables/HashingProvider.html",[3,0.235,4,0.208,5,0.208,7,0.262,8,0.02,9,0.779,12,0.235,13,0.071,16,0.015,17,0.015,84,0.662,98,3.44,104,1.012,105,1.539,107,0.411,108,1.623,110,0.754,112,1.623,113,2.471,136,1.709,137,1.465,138,1.128,159,3.016,173,5.989,199,5.231,200,4.71,201,3.626,202,5.882,203,5.231,205,4.71,207,2.823,208,2.619,209,4.71,211,4.71,463,3.626,464,4.232,465,4.232]],["title/entities/MetaOption.html",[466,1.656,467,1.758]],["body/entities/MetaOption.html",[3,0.207,4,0.184,5,0.184,7,0.314,8,0.02,12,0.207,13,0.063,16,0.013,17,0.013,49,3.405,84,0.799,86,2.203,88,2.173,107,0.363,110,0.883,113,1.748,126,1.804,228,1.496,259,1.575,279,2.779,290,3.624,318,2.462,361,4.379,362,3.863,427,1.436,466,2.922,467,2.443,468,3.198,469,3.206,470,4.922,471,4.922,472,4.922,473,3.743,474,3.974,475,3.743,476,2.589,477,3.506,478,3.743,479,3.206,480,5.067,481,3.863,482,3.743,483,3.743,484,4.922,485,3.743,486,2.853,487,3.506,488,5.067,489,4.341,490,2.589,491,5.067,492,3.863,493,3.743,494,3.206,495,3.743,496,3.206,497,3.206]],["title/classes/MetaOptionDto.html",[13,0.061,275,2.146]],["body/classes/MetaOptionDto.html",[3,0.26,4,0.23,5,0.23,7,0.363,8,0.02,12,0.26,13,0.099,16,0.016,17,0.016,84,0.771,107,0.455,110,0.643,113,2.023,126,1.314,130,1.248,147,1.534,224,1.797,228,1.732,240,1.898,244,3.218,261,2.829,267,2.758,275,3.453,296,4.472,297,3.571,298,3.571,332,4.472,333,3.453,342,4.472,354,3.571,355,3.571,356,3.571,361,5.268,362,4.472,468,2.829,498,4.014,499,4.685,500,4.685]],["title/injectables/MetaOptionService.html",[104,0.671,501,2.146]],["body/injectables/MetaOptionService.html",[3,0.216,4,0.191,5,0.191,7,0.404,8,0.02,9,0.716,12,0.216,13,0.066,15,1.273,16,0.014,17,0.014,46,1.576,48,3.43,82,1.341,84,0.626,104,0.957,105,1.414,107,0.377,108,1.535,110,0.713,112,1.148,114,1.209,121,2.02,122,2.374,136,1.616,137,1.386,138,1.067,150,1.793,188,3.305,195,1.414,196,1.667,208,2.107,241,1.793,275,3.681,343,2.965,417,3.211,425,2.29,427,1.492,467,2.507,468,2.825,501,3.061,502,5.018,503,3.332,504,5.018,505,3.889,506,3.889,507,3.597,508,4.455,509,3.889,510,3.889,511,5.018,512,5.2,513,2.29,514,3.332,515,3.889,516,3.332,517,5.858,518,3.889,519,3.889]],["title/controllers/MetaOptionsController.html",[0,1.399,520,2.523]],["body/controllers/MetaOptionsController.html",[0,1.422,2,1.422,3,0.205,4,0.182,5,0.182,7,0.397,8,0.02,9,0.682,12,0.205,13,0.062,15,1.213,16,0.013,17,0.013,48,3.827,49,2.584,69,1.683,82,1.736,84,0.446,88,1.777,107,0.36,108,1.486,110,0.508,112,1.094,114,1.152,119,2.355,121,1.971,126,1.039,127,2.355,130,1.341,132,2.181,136,1.152,137,0.987,138,0.76,140,2.963,144,3.199,145,3.199,146,2.355,147,1.213,150,1.278,151,2.355,152,1.787,195,1.347,208,2.039,241,2.28,275,3.609,343,2.825,435,2.485,467,1.787,468,2.427,501,3.364,504,4.896,507,2.563,511,5.665,513,2.181,514,3.174,520,3.482,521,3.174,522,5.033,523,3.705,524,3.705,525,3.482,526,3.705,527,3.705,528,5.033,529,3.174,530,3.174,531,3.705,532,3.705,533,3.174,534,3.705]],["title/modules/MetaOptionsModule.html",[18,1.258,31,2.317]],["body/modules/MetaOptionsModule.html",[2,2.215,3,0.253,4,0.224,5,0.224,7,0.425,8,0.02,9,0.841,12,0.253,13,0.077,16,0.015,17,0.015,18,2.184,20,2.075,21,2.075,22,2.346,23,2.346,24,2.075,25,3.251,26,2.346,31,4.453,36,2.965,37,2.346,38,2.204,40,2.69,45,2.904,46,1.852,48,3.168,49,2.346,467,2.204,468,2.204,501,4.124,513,2.69,520,4.38,529,3.915,530,3.915,535,3.915,536,3.915,537,4.57,538,4.57,539,4.57]],["title/interfaces/Paginated.html",[540,2.523,541,2.317]],["body/interfaces/Paginated.html",[3,0.26,4,0.23,5,0.23,8,0.02,12,0.26,16,0.016,17,0.016,48,3.682,84,0.862,107,0.455,113,2.383,207,3.446,228,1.732,259,2.086,540,3.241,541,3.728,542,4.685,543,4.014,544,5.75,545,5.486,546,6.712,547,4.014,548,4.014,549,4.014,550,4.014,551,4.014,552,4.014,553,4.014,554,4.014,555,4.014]],["title/modules/PaginationModule.html",[18,1.258,32,2.146]],["body/modules/PaginationModule.html",[3,0.265,4,0.234,5,0.234,7,0.368,8,0.02,9,0.879,12,0.265,13,0.081,16,0.016,17,0.016,18,2.228,20,2.169,21,2.169,22,2.452,23,2.452,24,2.169,25,3.316,26,3.316,32,4.229,36,3.048,37,2.452,38,2.303,170,3.035,556,4.091,557,4.091,558,4.091,559,4.382,560,4.775,561,4.775]],["title/injectables/PaginationProvider.html",[104,0.671,559,2.146]],["body/injectables/PaginationProvider.html",[3,0.168,4,0.148,5,0.148,7,0.384,8,0.02,9,0.557,12,0.168,13,0.051,15,0.991,16,0.012,17,0.012,48,1.661,61,3.588,82,1.507,84,0.617,104,0.804,105,1.101,107,0.294,108,1.29,110,0.599,112,0.894,114,0.941,121,1.768,122,2.077,136,1.593,137,1.164,138,0.897,150,1.935,195,1.101,196,1.872,207,1.554,208,1.77,259,1.849,272,3.907,287,1.554,347,3.078,417,3.281,427,1.161,435,1.227,451,3.303,453,2.308,541,2.776,544,2.593,545,2.593,547,2.593,548,2.593,549,2.593,550,4.807,551,2.593,552,2.593,553,2.593,554,2.593,555,2.593,559,2.572,562,3.907,563,2.593,564,5.125,565,3.027,566,5.311,567,3.027,568,4.368,569,3.027,570,3.027,571,3.742,572,2.776,573,4.368,574,3.027,575,3.027,576,2.593,577,2.593,578,3.027,579,3.027,580,4.391,581,3.027,582,2.593,583,5.611,584,2.593,585,6.542,586,3.027,587,3.027,588,3.027,589,3.027,590,3.027,591,3.027,592,4.368,593,3.027,594,3.027,595,3.027,596,3.027,597,3.027,598,3.027,599,4.368,600,3.027,601,3.027,602,3.027,603,3.027,604,3.027]],["title/classes/PaginationQueryDto.html",[13,0.061,451,2.146]],["body/classes/PaginationQueryDto.html",[3,0.246,4,0.217,5,0.217,7,0.351,8,0.02,12,0.246,13,0.105,16,0.015,17,0.015,84,0.752,107,0.43,110,0.777,126,1.589,138,1.35,224,1.701,228,1.673,240,1.797,243,2.818,259,2.045,286,3.919,287,3.205,330,4.319,334,3.424,347,3.107,451,3.335,452,4.319,605,3.798,606,3.967,607,4.318,608,4.853,609,5.665,610,4.434,611,4.434,612,6.243,613,4.434,614,4.434,615,5.665,616,5.665]],["title/classes/PatchPostDto.html",[13,0.061,617,2.317]],["body/classes/PatchPostDto.html",[3,0.261,4,0.231,5,0.231,7,0.398,8,0.02,12,0.261,13,0.099,16,0.016,17,0.016,84,0.568,88,1.831,107,0.458,110,0.647,126,1.322,130,1.256,147,1.543,169,5.045,224,1.809,228,1.739,240,1.91,241,1.626,244,3.23,246,2.775,248,2.996,259,1.831,267,2.775,318,2.968,330,4.074,333,3.467,455,4.074,617,3.743,618,5.045,619,5.889,620,4.715,621,4.715,622,4.039,623,3.594]],["title/classes/PatchUserDto.html",[13,0.061,624,2.523]],["body/classes/PatchUserDto.html",[3,0.295,4,0.261,5,0.261,7,0.393,8,0.02,12,0.295,13,0.09,16,0.017,17,0.017,224,2.041,230,2.566,241,1.835,242,3.132,383,4.056,455,4.386,622,4.559,624,4.386,625,4.559,626,6.34,627,4.559,628,4.559]],["title/entities/Post.html",[88,1.133,466,1.656]],["body/entities/Post.html",[3,0.125,4,0.111,5,0.111,7,0.344,8,0.02,12,0.125,13,0.038,16,0.009,17,0.009,49,1.158,66,3.301,84,0.849,86,1.328,87,1.817,88,1.089,107,0.219,110,0.904,113,2.242,126,1.848,130,1.145,138,1.334,152,2.072,192,1.561,207,1.158,228,1.035,250,3.681,251,3.681,252,3.276,253,4.566,254,3.681,255,2.973,256,2.973,257,2.731,258,3.681,259,1.089,279,3.448,290,2.063,314,3.999,318,1.842,321,3.806,324,3.351,340,1.933,341,1.933,349,5.131,374,2.677,427,0.866,429,2.063,466,2.2,467,2.677,468,1.088,474,2.973,476,4.255,477,4.77,479,1.933,481,2.672,487,4.349,489,3.002,490,3.351,513,1.328,607,3.693,629,1.933,630,2.731,631,2.256,632,3.505,633,5.552,634,2.256,635,4.15,636,2.256,637,4.566,638,2.256,639,3.002,640,2.256,641,2.256,642,3.505,643,2.256,644,2.256,645,3.505,646,2.256,647,2.256,648,2.672,649,3.002,650,2.256,651,2.256,652,1.933,653,3.505,654,2.256,655,2.256,656,2.256,657,3.505,658,3.002,659,3.505,660,1.933,661,2.256,662,2.256,663,2.256,664,2.256,665,2.256,666,2.256,667,2.256,668,2.672,669,2.256,670,2.256]],["title/controllers/PostsController.html",[0,1.399,671,2.523]],["body/controllers/PostsController.html",[0,0.829,2,0.829,3,0.12,4,0.106,5,0.106,7,0.338,8,0.02,9,0.398,12,0.12,13,0.036,15,0.708,16,0.009,17,0.009,67,1.852,69,0.982,82,0.745,84,0.748,88,2.127,107,0.21,108,1.001,110,0.705,112,1.518,114,1.598,119,1.374,121,2.302,126,1.442,127,3.267,129,4.199,130,1.795,132,2.461,136,1.471,137,1.573,138,0.971,140,1.272,144,3.466,145,3.466,146,1.374,147,0.708,150,0.745,151,3.267,152,2.749,195,0.786,228,0.638,233,3.274,241,1.632,246,3.21,259,2.094,261,2.63,279,2.596,287,2.8,318,2.203,347,1.859,360,1.648,435,1.918,454,2.786,461,1.648,466,1.539,507,1.495,525,2.345,572,2.154,606,2.154,617,3.008,623,3.187,630,3.008,671,2.345,672,1.852,673,3.556,674,3.389,675,2.903,676,4.055,677,4.18,678,2.903,679,2.161,680,3.389,681,2.161,682,2.161,683,3.389,684,1.852,685,3.945,686,2.161,687,2.161,688,3.389,689,2.161,690,2.161,691,2.161,692,2.161,693,4.055,694,2.161,695,2.161,696,4.733,697,2.161,698,2.161,699,2.161,700,2.161,701,3.389,702,2.161,703,4.055,704,2.161,705,2.161,706,2.161,707,3.389,708,1.852,709,2.583,710,3.581,711,2.461,712,1.852,713,3.389,714,3.581,715,1.11,716,1.648,717,1.495,718,2.161,719,2.161,720,2.161,721,2.161,722,1.648,723,2.161,724,2.161,725,2.161,726,3.389,727,1.852,728,2.161,729,2.161,730,2.161,731,2.161,732,1.852,733,2.161,734,2.161,735,1.852,736,2.161,737,2.161]],["title/modules/PostsModule.html",[18,1.258,33,2.317]],["body/modules/PostsModule.html",[2,2.034,3,0.222,4,0.196,5,0.196,7,0.439,8,0.02,9,0.737,12,0.222,13,0.068,16,0.014,17,0.014,18,2.05,20,1.819,21,1.819,22,2.056,23,2.056,24,1.819,25,3.052,26,2.056,32,3.981,33,4.616,34,3.981,35,3.709,36,2.722,37,2.056,38,1.931,40,3.121,45,2.545,46,1.623,49,2.056,88,1.245,164,3.431,467,2.557,468,1.931,513,2.357,671,4.112,711,3.981,712,3.431,738,3.431,739,4.004,740,3.431,741,4.004,742,4.004,743,3.431,744,4.004,745,4.004,746,4.004]],["title/injectables/PostsService.html",[104,0.671,711,2.146]],["body/injectables/PostsService.html",[3,0.087,4,0.077,5,0.077,7,0.384,8,0.02,9,0.289,12,0.087,13,0.027,15,1.428,16,0.007,17,0.007,46,0.637,49,0.807,52,1.347,53,0.999,61,1.847,66,1.894,69,2.14,82,1.625,84,0.525,87,1.102,88,2.09,104,0.482,105,0.572,107,0.153,108,0.773,110,0.646,112,1.288,114,1.465,121,2.137,122,2.511,130,1.395,136,1.356,137,1.163,138,0.895,139,1.542,140,0.926,150,1.355,170,1.665,182,1.199,183,2.272,188,1.665,191,1.199,192,1.088,195,1.586,196,2.403,208,1.909,241,1.161,246,2.773,252,1.199,257,3.454,259,1.465,287,0.807,318,2.656,347,0.863,374,2.524,417,2.687,422,2.994,423,0.999,425,0.926,427,0.603,429,1.982,430,3.326,432,2.496,433,2.496,434,3.175,435,2.272,437,2.496,440,2.312,442,2.994,454,2.312,467,1.263,468,0.758,492,1.199,508,2.885,513,0.926,516,1.347,541,0.999,559,2.941,562,1.199,571,1.347,582,1.347,584,1.347,606,0.999,617,2.496,623,2.567,630,2.994,660,1.347,668,1.997,673,3.018,675,2.244,676,3.365,678,2.244,684,2.244,685,2.329,693,2.885,703,2.885,711,1.542,715,0.807,716,1.199,717,1.088,743,1.347,747,1.347,748,2.244,749,2.62,750,3.367,751,3.367,752,2.885,753,2.154,754,1.572,755,2.62,756,1.572,757,1.572,758,1.572,759,1.572,760,1.572,761,2.62,762,1.572,763,1.572,764,1.088,765,1.572,766,1.572,767,1.572,768,1.572,769,1.572,770,1.572,771,1.572,772,1.572,773,1.572,774,2.62,775,3.367,776,2.62,777,1.572,778,1.572,779,1.572,780,4.363,781,1.572,782,2.717,783,3.365,784,2.717,785,3.365,786,1.572,787,1.347,788,1.572,789,1.572,790,1.572,791,1.572,792,1.572,793,1.572,794,1.572,795,2.62,796,1.572,797,1.572,798,1.572,799,2.62,800,1.572,801,2.62,802,1.572,803,2.62,804,1.572,805,2.62,806,1.572,807,2.62,808,1.572,809,2.62,810,1.572,811,2.62,812,1.572,813,1.572,814,1.572,815,1.572,816,1.572]],["title/classes/SignInDto.html",[13,0.061,125,2.146]],["body/classes/SignInDto.html",[3,0.252,4,0.223,5,0.223,7,0.356,8,0.02,12,0.252,13,0.097,16,0.015,17,0.015,84,0.693,98,3.516,107,0.441,110,0.789,113,2.289,125,3.386,126,1.613,130,1.533,147,1.487,224,1.742,228,1.698,240,1.841,244,3.463,261,3.2,267,3.386,268,3.386,333,3.716,335,3.98,384,3.756,405,4.928,408,3.891,817,3.891,818,4.542,819,4.542,820,4.542,821,4.542,822,4.542]],["title/injectables/SigninProvider.html",[104,0.671,160,2.146]],["body/injectables/SigninProvider.html",[3,0.215,4,0.19,5,0.19,7,0.387,8,0.02,9,0.714,12,0.215,13,0.065,15,1.27,16,0.014,17,0.014,61,2.128,69,1.762,82,1.79,84,0.625,87,2.132,98,3.004,104,0.955,105,1.41,107,0.376,108,1.533,110,0.712,112,1.145,114,1.818,115,3.323,121,2.018,122,2.371,123,4.762,124,3.957,125,3.833,136,1.614,137,1.383,138,1.065,139,2.284,143,2.957,150,2.154,152,1.871,160,3.056,162,2.284,182,2.957,183,3.3,188,3.299,191,2.957,192,2.684,194,2.684,195,1.41,196,1.663,312,3.957,384,2.128,440,2.284,823,3.323,824,3.879,825,3.879,826,3.957,827,3.879,828,3.879]],["title/entities/Tag.html",[374,1.758,466,1.656]],["body/entities/Tag.html",[3,0.166,4,0.147,5,0.147,7,0.268,8,0.02,12,0.166,13,0.05,16,0.012,17,0.012,66,3.254,84,0.852,86,1.761,88,1.919,107,0.29,110,0.926,113,2.327,126,1.893,130,1.356,137,1.356,138,1.267,228,1.279,255,3.521,256,3.521,259,1.346,279,3.061,290,3.634,318,2.182,321,3.923,370,4.361,374,2.088,427,1.147,466,1.967,470,4.361,471,4.361,472,4.361,474,3.521,476,4.097,477,4.668,481,3.301,484,4.361,486,2.28,487,4.271,490,2.996,494,2.562,496,2.562,497,2.562,635,4.78,637,4.706,639,3.71,648,4.254,649,3.71,652,2.562,658,3.71,673,3.521,829,2.562,830,5.09,831,2.991,832,5.09,833,2.991,834,2.991,835,2.991,836,2.991,837,2.991,838,4.33,839,2.991,840,2.991,841,4.33,842,2.991,843,2.991]],["title/controllers/TagsController.html",[0,1.399,844,2.523]],["body/controllers/TagsController.html",[0,1.086,2,1.086,3,0.157,4,0.139,5,0.139,7,0.359,8,0.02,9,0.521,12,0.157,13,0.048,15,0.927,16,0.011,17,0.011,69,1.286,82,0.977,84,0.594,88,1.533,107,0.275,108,1.228,110,0.677,112,1.456,114,1.533,119,1.8,121,2.26,126,1.384,127,3.135,129,4.007,130,1.614,132,2.449,136,1.533,137,1.314,138,1.012,140,1.667,144,3.455,145,3.455,146,1.8,147,0.927,150,1.435,151,3.135,152,2.379,195,1.03,208,1.686,241,2.089,257,1.8,259,1.883,367,3.455,374,3.329,435,2.203,525,2.879,572,1.8,685,5.004,709,3.76,715,1.454,727,2.426,732,3.565,735,2.426,752,2.426,753,2.282,844,2.879,845,2.426,846,3.565,847,3.565,848,4.161,849,2.832,850,4.933,851,2.832,852,2.832,853,4.161,854,4.161,855,2.832,856,3.565,857,2.832,858,2.832,859,4.161,860,5.437,861,2.832,862,5.188,863,2.832,864,2.832,865,4.161,866,2.426,867,2.426,868,2.159,869,2.832,870,2.832,871,2.832,872,2.832,873,2.832,874,2.832,875,2.832,876,2.832,877,2.832]],["title/modules/TagsModule.html",[18,1.258,34,2.146]],["body/modules/TagsModule.html",[2,2.19,3,0.249,4,0.22,5,0.22,7,0.423,8,0.02,9,0.826,12,0.249,13,0.076,16,0.015,17,0.015,18,2.165,20,2.038,21,2.038,22,2.304,23,2.304,24,2.038,25,3.223,26,3.223,34,4.171,36,2.931,37,2.304,38,2.164,40,2.641,45,2.852,46,1.818,374,2.164,753,4.05,844,4.343,866,3.844,868,3.421,878,3.844,879,3.844,880,3.844,881,4.487,882,4.487,883,4.487]],["title/injectables/TagsService.html",[104,0.671,753,2]],["body/injectables/TagsService.html",[3,0.152,4,0.135,5,0.135,7,0.354,8,0.02,9,0.506,12,0.152,13,0.046,15,0.9,16,0.011,17,0.011,46,1.114,61,1.507,66,1.963,69,1.248,82,0.948,84,0.722,104,0.749,105,0.999,107,0.267,108,1.202,110,0.822,112,1.689,114,1.778,121,2.407,122,2.828,136,1.862,137,1.596,138,1.23,139,2.853,150,1.848,195,0.999,196,2.452,208,2.172,241,1.404,257,2.586,259,2.112,318,2.912,367,3.406,374,3.276,417,2.937,425,1.618,427,1.054,435,1.649,492,3.103,685,3.707,715,1.411,753,2.232,846,3.487,847,3.487,862,3.487,867,2.354,868,2.095,884,2.354,885,4.07,886,4.07,887,4.07,888,2.748,889,2.748,890,4.07,891,4.07,892,2.748,893,2.748,894,4.07,895,2.748,896,4.07,897,2.748,898,4.07,899,2.748,900,4.07,901,2.748,902,4.07,903,2.748,904,2.748,905,2.748,906,2.748,907,2.748,908,2.748,909,2.748,910,2.748,911,2.748,912,2.748,913,2.748]],["title/entities/User.html",[87,1.194,466,1.656]],["body/entities/User.html",[3,0.194,4,0.172,5,0.172,7,0.3,8,0.02,12,0.194,13,0.059,16,0.013,17,0.013,66,3.135,84,0.841,86,2.063,87,1.586,88,2.021,98,2.85,107,0.34,110,0.892,113,2.342,126,1.824,228,1.43,259,1.506,279,3.566,318,2.38,321,4.316,384,3.045,385,4.756,386,4.756,388,5.819,427,1.345,466,2.2,474,3.841,476,4.144,477,4.699,486,2.672,487,4.349,490,3.352,637,5.178,648,3.693,673,3.841,914,3.003,915,3.505,916,3.505,917,3.505,918,3.505,919,3.505,920,3.505,921,4.845,922,3.505,923,4.845]],["title/injectables/UserCreateManyProvider.html",[104,0.671,924,2.146]],["body/injectables/UserCreateManyProvider.html",[3,0.174,4,0.22,5,0.154,7,0.374,8,0.02,9,0.578,12,0.174,13,0.053,15,1.029,16,0.012,17,0.012,61,3.131,82,1.084,84,0.54,87,2.163,104,0.826,105,1.143,107,0.305,108,1.325,110,0.616,112,0.928,114,0.977,121,1.805,122,2.121,130,1.196,132,1.85,136,1.395,137,1.196,138,0.921,139,1.85,150,1.969,195,1.143,196,2.691,207,1.613,223,3.36,226,3.326,229,2.641,230,1.515,241,2.165,242,1.85,423,1.997,426,1.85,427,1.206,430,3.628,432,3.326,433,3.326,434,3.326,435,2.121,437,1.997,439,2.174,440,1.85,572,1.997,580,2.692,715,2.304,764,2.174,782,2.174,784,2.174,785,2.692,924,2.641,925,3.989,926,2.692,927,3.844,928,3.142,929,5.378,930,3.142,931,3.844,932,3.142,933,2.692,934,3.142,935,2.395,936,3.142,937,3.142,938,3.142,939,3.142,940,3.142,941,2.692,942,3.142,943,3.142,944,3.142,945,2.174,946,3.142,947,3.142,948,3.142,949,3.142,950,3.142,951,3.142,952,3.142,953,3.142,954,3.142,955,3.142,956,4.487,957,3.142,958,4.487,959,3.142,960,3.142]],["title/injectables/UserCreateProvider.html",[104,0.671,961,2.146]],["body/injectables/UserCreateProvider.html",[3,0.17,4,0.15,5,0.15,7,0.397,8,0.02,9,0.564,12,0.17,13,0.052,15,1.443,16,0.012,17,0.012,46,1.242,69,1.392,82,1.78,84,0.531,87,2.188,98,1.573,102,2.626,104,0.811,105,1.114,107,0.297,108,1.301,110,0.605,112,0.905,114,0.953,121,1.78,122,2.091,130,1.375,136,1.37,137,1.174,138,0.904,150,1.52,159,3.6,162,1.804,166,1.948,194,2.12,195,1.602,196,2.212,208,1.786,215,2.626,230,2.721,241,1.78,242,1.804,384,2.831,416,2.626,417,3.069,419,3.36,423,1.948,425,1.804,426,1.804,427,1.176,428,2.336,429,1.804,430,3.799,432,2.801,433,3.28,434,3.28,435,2.523,436,2.626,437,2.801,438,2.12,439,3.049,440,3.038,441,2.626,442,2.336,715,1.573,764,2.12,782,2.12,784,3.049,826,2.336,925,3.934,945,3.049,961,2.594,962,2.626,963,3.36,964,3.065,965,3.36,966,3.065,967,3.065,968,3.065,969,5.161,970,3.065,971,3.065,972,3.065,973,3.065,974,3.065,975,3.065,976,4.407,977,5.161,978,3.065,979,3.065,980,3.065,981,2.336]],["title/injectables/UserService.html",[104,0.671,183,1.758]],["body/injectables/UserService.html",[3,0.112,4,0.099,5,0.099,7,0.398,8,0.02,9,0.372,12,0.112,13,0.034,15,1.734,16,0.009,17,0.009,46,0.819,53,1.284,69,1.817,82,1.989,84,0.638,87,2.27,104,0.591,105,0.735,107,0.196,108,1.346,110,0.727,112,1.469,113,1.38,114,1.417,120,1.731,121,2.269,122,2.563,130,1.215,136,1.647,137,1.412,138,1.087,141,3.259,150,1.108,152,0.974,162,1.189,170,2.042,183,1.55,194,1.398,195,1.926,196,1.954,208,2.337,223,2.684,226,2.542,229,1.189,230,2.198,241,1.827,242,1.189,259,1.847,287,2.054,318,2.271,384,2.501,402,2.753,412,3.271,415,2.753,417,2.554,419,3.05,420,2.753,422,3.475,423,1.284,425,1.189,426,1.189,427,0.775,428,1.54,429,1.189,430,2.042,431,1.731,432,1.284,433,2.042,434,2.542,435,2.016,437,1.284,438,1.398,439,1.398,440,2.355,456,3.367,507,2.223,566,1.731,606,2.542,668,2.45,715,1.65,717,1.398,722,2.45,748,2.753,764,1.398,782,1.398,784,1.398,924,2.929,927,3.427,929,1.731,931,1.731,933,2.753,935,1.54,945,1.398,961,2.684,963,2.45,965,2.45,981,1.54,982,1.731,983,4,984,3.213,985,2.021,986,4,987,4.559,988,4,989,4,990,2.021,991,3.213,992,2.021,993,2.021,994,2.021,995,2.021,996,2.021,997,3.213,998,2.021,999,2.021,1000,3.213,1001,2.021,1002,1.731,1003,2.021,1004,1.731,1005,1.731,1006,1.731,1007,1.731,1008,1.731,1009,2.021,1010,2.021,1011,3.213,1012,2.021,1013,2.021,1014,2.021,1015,2.021,1016,4.559,1017,2.021,1018,2.021,1019,2.021,1020,2.021]],["title/controllers/UsersController.html",[0,1.399,1021,2.523]],["body/controllers/UsersController.html",[0,0.859,2,0.859,3,0.124,4,0.11,5,0.11,7,0.37,8,0.02,9,0.412,12,0.124,13,0.038,15,0.733,16,0.009,17,0.009,69,1.017,82,0.772,84,0.72,87,2.092,88,0.696,107,0.217,108,1.029,110,0.662,112,1.425,114,1.857,119,1.423,121,2.238,126,1.353,127,2.214,129,2.41,130,1.672,132,2.84,136,1.5,137,1.475,138,0.99,140,2.84,144,3.066,145,3.066,146,1.423,147,0.733,150,1.202,151,2.718,152,2.062,183,2.062,187,3.985,188,2.214,195,0.814,207,1.789,208,1.412,223,2.84,226,3.322,229,3.077,230,2.327,233,3.338,241,2.238,242,2.051,259,2.017,261,2.669,268,2.051,279,2.646,287,3.067,317,3.663,360,2.656,426,1.318,429,3.258,435,2.542,456,3.517,461,2.656,525,4.133,533,1.919,572,1.423,606,3.517,608,1.919,624,3.616,708,2.985,709,3.26,710,3.663,714,3.663,715,1.789,716,1.707,717,1.549,722,2.656,856,4.133,935,1.707,945,2.41,963,2.656,965,1.707,1002,1.919,1021,2.41,1022,1.919,1023,3.484,1024,3.484,1025,2.239,1026,2.239,1027,2.239,1028,2.239,1029,3.484,1030,2.239,1031,2.239,1032,2.239,1033,2.239,1034,2.239,1035,2.239,1036,2.239,1037,2.239,1038,3.484,1039,2.239,1040,2.239,1041,2.239,1042,2.239,1043,2.239,1044,2.239,1045,2.239,1046,1.919,1047,2.239,1048,2.239,1049,2.239,1050,2.239,1051,2.239,1052,2.239,1053,2.239,1054,2.239,1055,2.239,1056,2.239,1057,2.239,1058,2.239,1059,2.239,1060,2.239,1061,2.239,1062,2.239]],["title/modules/UsersModule.html",[18,1.258,35,2]],["body/modules/UsersModule.html",[2,1.944,3,0.207,4,0.184,5,0.184,7,0.442,8,0.02,9,0.689,12,0.207,13,0.063,16,0.013,17,0.013,18,1.981,20,1.7,21,1.7,22,1.922,23,1.922,24,1.7,25,2.949,26,2.949,30,2.983,35,3.968,36,2.602,37,1.922,38,1.805,40,2.203,45,2.379,46,1.517,51,3.206,53,2.379,87,1.659,162,2.983,183,3.465,241,1.291,412,3.904,426,2.203,924,3.904,961,3.904,1004,3.206,1005,3.206,1006,3.206,1007,3.206,1008,3.206,1021,3.974,1046,3.206,1063,3.206,1064,3.206,1065,3.206,1066,3.743,1067,3.743,1068,3.743,1069,5.067,1070,3.743,1071,3.743,1072,3.743]],["title/coverage.html",[1073,3.795]],["body/coverage.html",[0,2.339,1,1.997,5,0.142,6,2.473,8,0.02,10,1.699,13,0.116,16,0.011,17,0.011,24,1.311,39,2.2,49,2.166,62,2.2,84,0.348,87,1.381,88,0.897,104,1.275,106,2.473,117,1.997,118,2.473,125,1.699,141,1.583,159,1.583,160,1.699,166,1.834,180,2.473,183,1.392,198,2.473,206,2.473,223,1.699,225,3.217,226,1.834,227,2.473,229,1.699,230,1.392,241,0.995,246,1.699,247,2.473,248,3.487,275,1.699,324,2.919,342,2.2,367,1.834,368,2.473,369,2.473,374,1.392,383,3.217,412,1.699,413,2.473,414,2.473,435,1.17,443,1.997,444,3.217,451,1.699,452,1.997,454,1.699,456,1.834,457,2.473,458,2.473,463,2.473,466,2.492,467,1.392,468,2.646,469,2.473,498,2.473,501,1.699,502,2.473,503,2.473,520,1.997,521,2.473,540,1.997,541,1.834,543,2.473,559,1.699,562,2.2,563,2.473,605,2.473,617,1.834,618,2.473,624,1.997,625,2.473,629,2.473,671,1.997,672,2.473,711,1.699,747,2.473,753,1.583,787,6.211,817,2.473,823,2.473,829,2.473,844,1.997,845,2.473,884,2.473,914,2.473,924,1.699,925,3.217,926,2.473,961,1.699,962,2.473,982,2.473,1021,1.997,1022,2.473,1073,2.2,1074,2.473,1075,2.886,1076,2.886,1077,6.586,1078,2.886,1079,5.838,1080,4.22,1081,4.22,1082,4.988,1083,4.22,1084,4.22,1085,6.457,1086,6.298,1087,2.886,1088,2.473,1089,2.886,1090,2.886,1091,4.22,1092,2.886,1093,2.886,1094,2.886,1095,2.886,1096,2.886,1097,2.886,1098,2.886,1099,2.886,1100,2.886,1101,2.886]],["title/dependencies.html",[21,1.992,1102,2.608]],["body/dependencies.html",[8,0.02,9,0.902,13,0.102,16,0.016,17,0.016,21,2.226,46,1.986,53,3.115,147,1.604,214,4.199,240,1.986,243,3.115,427,1.88,576,4.199,577,4.199,627,4.199,628,4.199,1103,6.535,1104,4.901,1105,4.901,1106,4.901,1107,4.901,1108,4.901,1109,4.901,1110,4.901,1111,4.901,1112,4.901,1113,4.901,1114,4.901,1115,4.901,1116,4.901,1117,4.901,1118,4.901,1119,4.901,1120,4.901,1121,4.901]],["title/miscellaneous/enumerations.html",[1122,1.792,1123,3.757]],["body/miscellaneous/enumerations.html",[8,0.02,16,0.016,17,0.016,88,1.906,107,0.488,253,4.674,286,5.072,287,3.148,291,5.253,314,4.674,1122,2.963,1123,4.312,1124,5.033,1125,5.033,1126,5.033,1127,6.132,1128,6.132,1129,5.033,1130,6.132,1131,6.132,1132,6.132]],["title/miscellaneous/functions.html",[1122,1.792,1133,3.757]],["body/miscellaneous/functions.html",[8,0.018,16,0.018,17,0.018,24,3.167,107,0.554,1088,4.891,1122,3.361,1133,4.891,1134,5.709]],["title/index.html",[107,0.295,1135,3.044,1136,3.044]],["body/index.html",[4,0.174,8,0.019,16,0.013,17,0.013,38,2.903,130,0.945,187,3.723,261,2.694,417,1.821,438,3.379,630,2.254,783,4.786,826,4.589,941,3.038,981,2.704,1073,2.704,1074,3.038,1137,3.547,1138,3.547,1139,5.587,1140,3.547,1141,3.547,1142,3.547,1143,3.547,1144,3.547,1145,5.587,1146,3.547,1147,3.547,1148,6.02,1149,3.547,1150,6.686,1151,3.547,1152,6.686,1153,3.547,1154,3.547,1155,4.884,1156,3.547,1157,3.547,1158,3.547,1159,5.587,1160,3.547,1161,3.547,1162,3.547,1163,3.547,1164,3.547,1165,3.547,1166,3.547,1167,3.547,1168,3.547,1169,6.02,1170,4.884,1171,3.547,1172,5.587,1173,3.547,1174,5.157,1175,3.547,1176,3.547,1177,3.547,1178,3.547,1179,3.547,1180,3.547,1181,5.587,1182,3.547,1183,3.547,1184,3.547,1185,4.884,1186,3.547,1187,3.547,1188,3.547,1189,3.547,1190,3.547,1191,3.547,1192,3.547,1193,3.547,1194,3.547,1195,3.547,1196,4.884,1197,3.547,1198,3.547,1199,3.547,1200,3.547,1201,3.547,1202,3.547,1203,4.884,1204,3.547,1205,3.547,1206,3.547,1207,4.884,1208,4.884,1209,3.547,1210,3.547,1211,3.547,1212,3.547,1213,3.547,1214,3.547,1215,3.547,1216,3.547,1217,3.547,1218,3.547,1219,3.547,1220,3.547,1221,3.547,1222,3.547,1223,3.547,1224,3.547,1225,3.547,1226,3.038]],["title/modules.html",[20,2.261]],["body/modules.html",[8,0.017,16,0.017,17,0.017,19,3.567,20,2.341,30,3.035,31,3.276,32,3.035,33,3.276,34,3.035,35,2.828,1174,6.253,1227,7.299,1228,7.299,1229,7.299]],["title/overview.html",[1230,4.265]],["body/overview.html",[2,1.293,8,0.02,10,3.201,16,0.013,17,0.013,18,1.162,19,5.01,20,1.53,21,1.53,22,1.73,23,1.73,24,1.53,25,1.73,26,1.73,27,2.887,28,2.887,29,2.887,30,4.023,31,3.939,32,3.881,33,4.448,34,3.881,35,3.903,36,2.42,37,1.73,38,1.625,86,1.984,105,1.225,141,3.616,156,2.887,157,2.887,158,2.887,159,3.23,160,3.201,183,3.179,224,1.293,347,1.848,412,3.201,501,3.201,535,2.887,536,2.887,540,2.331,556,2.887,557,2.887,558,2.887,559,3.881,711,3.201,738,2.887,740,2.887,753,3.616,878,2.887,879,2.887,880,2.887,924,3.201,961,3.201,1063,2.887,1064,2.887,1065,2.887,1230,2.887,1231,3.37,1232,3.37,1233,3.37,1234,3.37,1235,3.37]],["title/properties.html",[228,1.295,1102,2.608]],["body/properties.html",[8,0.02,16,0.017,17,0.017,130,1.504,228,1.666,630,3.587,1226,4.835,1236,5.644,1237,5.644,1238,5.644]],["title/miscellaneous/variables.html",[1122,1.792,1239,3.757]],["body/miscellaneous/variables.html",[8,0.018,16,0.017,17,0.017,39,4.303,62,5.004,63,4.835,107,0.548,286,3.905,607,4.303,1122,3.322,1239,4.835,1240,5.644]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":787,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["0.0.1",{"_index":1237,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1111,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1118,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1121,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1110,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1077,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1089,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1079,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1082,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1087,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1095,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1092,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"overview.html":{}}}],["1'})@apiquery({name",{"_index":697,"title":{},"body":{"controllers/PostsController.html":{}}}],["1'})@get('/:userid",{"_index":699,"title":{},"body":{"controllers/PostsController.html":{}}}],["1'})@isoptional()@isstring",{"_index":371,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["1'})@isstring()@isnotempty()@maxlength(100",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1/2",{"_index":1081,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":1097,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":608,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/UsersController.html":{}}}],["10.0.0",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1108,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["100)@isoptional",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["1024",{"_index":639,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["10})@apiquery({name",{"_index":1037,"title":{},"body":{"controllers/UsersController.html":{}}}],["12",{"_index":1235,"title":{},"body":{"overview.html":{}}}],["123",{"_index":462,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["1234567a",{"_index":822,"title":{},"body":{"classes/SignInDto.html":{}}}],["1234567a'})@isnotempty()@isstring",{"_index":820,"title":{},"body":{"classes/SignInDto.html":{}}}],["123456a",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["123456a'})@isstring()@isnotempty()@length(8",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["123})@isoptional()@isint()@type(undefined",{"_index":459,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["13",{"_index":1234,"title":{},"body":{"overview.html":{}}}],["16t07:46:32+0000",{"_index":359,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["17.13.3",{"_index":1113,"title":{},"body":{"dependencies.html":{}}}],["1})@isint()@isnotempty",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":360,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["2'})@apiquery({name",{"_index":698,"title":{},"body":{"controllers/PostsController.html":{}}}],["2.0.5",{"_index":1105,"title":{},"body":{"dependencies.html":{}}}],["2/3",{"_index":1086,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["200'})@delete('/delete",{"_index":857,"title":{},"body":{"controllers/TagsController.html":{}}}],["200'})@get('/get/all",{"_index":690,"title":{},"body":{"controllers/PostsController.html":{}}}],["200'})@post('/signin",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":525,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["2024",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":649,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["3.2.2",{"_index":1104,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":1084,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":1096,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":1233,"title":{},"body":{"overview.html":{}}}],["4/5",{"_index":1099,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":1090,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["5.1.1",{"_index":1109,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":1080,"title":{},"body":{"coverage.html":{}}}],["512",{"_index":841,"title":{},"body":{"entities/Tag.html":{}}}],["6",{"_index":1232,"title":{},"body":{"overview.html":{}}}],["6/7",{"_index":1094,"title":{},"body":{"coverage.html":{}}}],["66",{"_index":1085,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":1231,"title":{},"body":{"overview.html":{}}}],["7.4.2",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1120,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":1091,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":1083,"title":{},"body":{"coverage.html":{}}}],["8.13.0",{"_index":1115,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":1098,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":1093,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["93",{"_index":1015,"title":{},"body":{"injectables/UserService.html":{}}}],["96",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["96)@matches(/^(?=.*[a",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abc",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["abstract",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"injectables/HashingProvider.html":{}}}],["add",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{}}}],["already",{"_index":976,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["amazing",{"_index":1213,"title":{},"body":{"index.html":{}}}],["another",{"_index":442,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/UserCreateProvider.html":{}}}],["api",{"_index":722,"title":{},"body":{"controllers/PostsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":713,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":244,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MetaOptionDto.html":{},"classes/PatchPostDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty({description",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MetaOptionDto.html":{},"classes/PatchPostDto.html":{},"classes/SignInDto.html":{}}}],["apiproperty({enum",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":231,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{}}}],["apipropertyoptional({description",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{}}}],["apipropertyoptional({type",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":714,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags('authentication",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('meta",{"_index":532,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["apitags('posts",{"_index":719,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('tags",{"_index":870,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags('users",{"_index":1048,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1185,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1144,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["aready",{"_index":955,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["array",{"_index":232,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["arraynotempty",{"_index":237,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["assign",{"_index":813,"title":{},"body":{"injectables/PostsService.html":{}}}],["async",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/MetaOptionService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["auth.controller",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":117,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":630,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["authorid",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":141,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["auto",{"_index":669,"title":{},"body":{"entities/Post.html":{}}}],["autoloadentities",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["automically",{"_index":666,"title":{},"body":{"entities/Post.html":{}}}],["await",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/MetaOptionService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":1214,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":764,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["badrequestexception('can",{"_index":788,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception('email",{"_index":975,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["badrequestexception('post",{"_index":798,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception('tag",{"_index":794,"title":{},"body":{"injectables/PostsService.html":{}}}],["badrequestexception('your",{"_index":1017,"title":{},"body":{"injectables/UserService.html":{}}}],["base",{"_index":586,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["bcrypt",{"_index":214,"title":{},"body":{"injectables/BryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":222,"title":{},"body":{"injectables/BryptProvider.html":{}}}],["bcrypt.gensalt",{"_index":218,"title":{},"body":{"injectables/BryptProvider.html":{}}}],["bcrypt.hash(password",{"_index":220,"title":{},"body":{"injectables/BryptProvider.html":{}}}],["between",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["bidirectional",{"_index":496,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["big",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["bo",{"_index":495,"title":{},"body":{"entities/MetaOption.html":{}}}],["board",{"_index":1206,"title":{},"body":{"index.html":{}}}],["body",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1229,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1227,"title":{},"body":{"modules.html":{}}}],["brypt",{"_index":215,"title":{},"body":{"injectables/BryptProvider.html":{},"injectables/UserCreateProvider.html":{}}}],["bryptprovider",{"_index":166,"title":{"injectables/BryptProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BryptProvider.html":{},"injectables/UserCreateProvider.html":{},"coverage.html":{}}}],["buffer",{"_index":202,"title":{},"body":{"injectables/BryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["building",{"_index":1140,"title":{},"body":{"index.html":{}}}],["c",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["calculate",{"_index":591,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["cascade",{"_index":490,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["cascade'})@joincolumn",{"_index":482,"title":{},"body":{"entities/MetaOption.html":{}}}],["catch",{"_index":432,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["change",{"_index":667,"title":{},"body":{"entities/Post.html":{}}}],["channel",{"_index":1176,"title":{},"body":{"index.html":{}}}],["character",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":826,"title":{},"body":{"injectables/SigninProvider.html":{},"injectables/UserCreateProvider.html":{},"index.html":{}}}],["choose",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["clas",{"_index":904,"title":{},"body":{"injectables/TagsService.html":{}}}],["class",{"_index":13,"title":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"classes/MetaOptionDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":224,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"classes/MetaOptionDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/SignInDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":535,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":536,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":556,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":557,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":558,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":738,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":739,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":740,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":878,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":879,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":880,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1063,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1065,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1064,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":856,"title":{},"body":{"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["column",{"_index":487,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":476,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":1166,"title":{},"body":{"index.html":{}}}],["commit",{"_index":949,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["common/pagination/pagination.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["compare",{"_index":205,"title":{},"body":{"injectables/BryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compared",{"_index":221,"title":{},"body":{"injectables/BryptProvider.html":{}}}],["comparedpassword",{"_index":199,"title":{},"body":{"injectables/BryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["comparedpassword(data",{"_index":201,"title":{},"body":{"injectables/BryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["config",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["config/app.config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["config/environment.validation",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["config/profile.config",{"_index":1005,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["configmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["configmodule.forfeature(profileconfig",{"_index":1072,"title":{},"body":{"modules/UsersModule.html":{}}}],["configmodule.forroot",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["configprofile",{"_index":986,"title":{},"body":{"injectables/UserService.html":{}}}],["configservice",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{}}}],["configservice.get",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.database",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.username",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["configtype",{"_index":987,"title":{},"body":{"injectables/UserService.html":{}}}],["conflictexception",{"_index":934,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["conflictexception('email",{"_index":954,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["connect",{"_index":784,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["console.log(body",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(newurl",{"_index":597,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["const",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"injectables/BryptProvider.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["constructor",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["constructor(authservice",{"_index":985,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(datasource",{"_index":928,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["constructor(metaoptionrepo",{"_index":505,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["constructor(req",{"_index":565,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["constructor(tagrepo",{"_index":888,"title":{},"body":{"injectables/TagsService.html":{}}}],["constructor(userrepo",{"_index":416,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserCreateProvider.html":{}}}],["constructor(userservice",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{}}}],["contain",{"_index":748,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["content",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["content'})@isstring()@isoptional",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/MetaOptionDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":531,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('posts",{"_index":718,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('tags",{"_index":869,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":1047,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["contructor",{"_index":507,"title":{},"body":{"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/UserService.html":{}}}],["convert",{"_index":494,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["corect",{"_index":795,"title":{},"body":{"injectables/PostsService.html":{}}}],["correct",{"_index":790,"title":{},"body":{"injectables/PostsService.html":{}}}],["courses",{"_index":1183,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":1073,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":241,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["create.provider",{"_index":1007,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["create.provider.ts",{"_index":962,"title":{},"body":{"injectables/UserCreateProvider.html":{},"coverage.html":{}}}],["create.provider.ts:16",{"_index":964,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["create.provider.ts:33",{"_index":966,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["createdate",{"_index":470,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createdatecolumn",{"_index":472,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createmanyusers",{"_index":1023,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(@body",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusers(newuserarray",{"_index":1025,"title":{},"body":{"controllers/UsersController.html":{}}}],["createmanyusersdto",{"_index":223,"title":{"classes/CreateManyUsersDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createmetaoption",{"_index":504,"title":{},"body":{"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{}}}],["createmetaoption(newmeataoption",{"_index":509,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["createmetaoption(newmetaoption",{"_index":523,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmultip",{"_index":927,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createmultip(createusersdto",{"_index":931,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createpost",{"_index":749,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost(createpostdto",{"_index":755,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpostdto",{"_index":246,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["createposts",{"_index":674,"title":{},"body":{"controllers/PostsController.html":{}}}],["createposts(@body",{"_index":728,"title":{},"body":{"controllers/PostsController.html":{}}}],["createposts(createpostdto",{"_index":679,"title":{},"body":{"controllers/PostsController.html":{}}}],["createtag",{"_index":846,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["createtag(@body",{"_index":871,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(newtag",{"_index":849,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(newtagdto",{"_index":891,"title":{},"body":{"injectables/TagsService.html":{}}}],["createtagdto",{"_index":367,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["createuser",{"_index":963,"title":{},"body":{"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(newuser",{"_index":965,"title":{},"body":{"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["createuserdto",{"_index":230,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusersdto",{"_index":933,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["createusersdto.users",{"_index":944,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["cung",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["currentpage",{"_index":549,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["cấp",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["dai",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["dai'})@isstring()@isnotempty()@length(3",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["dai'})@isstring()@isnotempty()@length(5",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dai'})@isstring()@isnotempty()@maxlength(256)@matches(/^[a",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dai'})@isstring()@isnotempty()@maxlength(512)@matches(/^[a",{"_index":378,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["data",{"_index":207,"title":{},"body":{"injectables/BryptProvider.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/UserCreateManyProvider.html":{},"controllers/UsersController.html":{}}}],["database",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserCreateProvider.html":{}}}],["database.autoloadentities",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconfig",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["datasource",{"_index":929,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{}}}],["date",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["db",{"_index":785,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUserParamDto.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"controllers/MetaOptionsController.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1178,"title":{},"body":{"index.html":{}}}],["def",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["default",{"_index":607,"title":{},"body":{"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":1042,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(99",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":110,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["delete",{"_index":685,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["delete('/delete",{"_index":735,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["delete('/soft",{"_index":875,"title":{},"body":{"controllers/TagsController.html":{}}}],["deleted",{"_index":492,"title":{},"body":{"entities/MetaOption.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{}}}],["deletedat",{"_index":830,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":832,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":675,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@query('id",{"_index":736,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":684,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletetag",{"_index":847,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["deletetag(@query('id",{"_index":873,"title":{},"body":{"controllers/TagsController.html":{}}}],["deletetag(id",{"_index":894,"title":{},"body":{"injectables/TagsService.html":{}}}],["deletetag(idtag",{"_index":855,"title":{},"body":{"controllers/TagsController.html":{}}}],["dep",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["depend",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":991,"title":{},"body":{"injectables/UserService.html":{}}}],["description",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/MetaOptionDto.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":1153,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1190,"title":{},"body":{"index.html":{}}}],["discord",{"_index":1175,"title":{},"body":{"index.html":{}}}],["dive",{"_index":1177,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":1074,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":1130,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":365,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dtos/create",{"_index":715,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":717,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/patch",{"_index":716,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["dtos/post",{"_index":514,"title":{},"body":{"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{}}}],["dtos/query",{"_index":574,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dtos/singin.dto",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SigninProvider.html":{}}}],["duck",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["duck'})@isstring()@length(3",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["duplicate",{"_index":974,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["dụng",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["e2e",{"_index":1161,"title":{},"body":{"index.html":{}}}],["each",{"_index":245,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["eager",{"_index":633,"title":{},"body":{"entities/Post.html":{}}}],["efficient",{"_index":1141,"title":{},"body":{"index.html":{}}}],["email",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/User.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["email.provider",{"_index":1008,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["email.provider.ts",{"_index":414,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"coverage.html":{}}}],["email.provider.ts:11",{"_index":418,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["email.provider.ts:25",{"_index":421,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["encryped",{"_index":203,"title":{},"body":{"injectables/BryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["enddate",{"_index":445,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["enity",{"_index":670,"title":{},"body":{"entities/Post.html":{}}}],["enter",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/SignInDto.html":{},"controllers/UsersController.html":{}}}],["enterprise",{"_index":1195,"title":{},"body":{"index.html":{}}}],["entities",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":466,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":349,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enum'})@isenum(statustype)@isnotempty",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":1123,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/statustype.enum",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["env.${env}`.trim",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["env.development",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["envfilepath",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["environment",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["environmentvalidation",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["error",{"_index":433,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["example",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"classes/MetaOptionDto.html":{},"controllers/PostsController.html":{},"classes/SignInDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["exception",{"_index":441,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserCreateProvider.html":{}}}],["exist",{"_index":440,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["existuser",{"_index":969,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["experience",{"_index":1180,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":576,"title":{},"body":{"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["extends",{"_index":455,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["failed",{"_index":952,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["false",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["featuredimgurl",{"_index":370,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featureimgurl",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["few",{"_index":1164,"title":{},"body":{"index.html":{}}}],["fialrespone",{"_index":599,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["filename",{"_index":1012,"title":{},"body":{"injectables/UserService.html":{}}}],["final",{"_index":598,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["finally",{"_index":957,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["find",{"_index":422,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["findall",{"_index":983,"title":{},"body":{"injectables/UserService.html":{}}}],["findall(getuserparamdto",{"_index":994,"title":{},"body":{"injectables/UserService.html":{}}}],["findone",{"_index":984,"title":{},"body":{"injectables/UserService.html":{}}}],["findone(id",{"_index":997,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserbyemailprovider",{"_index":412,"title":{"injectables/FindUserByEmailProvider.html":{}},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["first",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["firstname",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["follow",{"_index":1199,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SigninProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":1139,"title":{},"body":{"index.html":{}}}],["full",{"_index":1194,"title":{},"body":{"index.html":{}}}],["funciton",{"_index":212,"title":{},"body":{"injectables/BryptProvider.html":{}}}],["function",{"_index":206,"title":{},"body":{"injectables/BryptProvider.html":{},"coverage.html":{}}}],["functions",{"_index":1133,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:id",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":1034,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":723,"title":{},"body":{"controllers/PostsController.html":{}}}],["get('/get/all",{"_index":730,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallpost",{"_index":676,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["getallpostbyuserid",{"_index":750,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallpostbyuserid(id",{"_index":759,"title":{},"body":{"injectables/PostsService.html":{}}}],["gethello",{"_index":109,"title":{},"body":{"injectables/AppService.html":{}}}],["getmultiptag",{"_index":885,"title":{},"body":{"injectables/TagsService.html":{}}}],["getmultiptag(ids",{"_index":896,"title":{},"body":{"injectables/TagsService.html":{}}}],["getpostbasedto",{"_index":443,"title":{"classes/GetPostBaseDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["getpostdto",{"_index":454,"title":{"classes/GetPostDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["getposts",{"_index":677,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":692,"title":{},"body":{"controllers/PostsController.html":{}}}],["gettag",{"_index":886,"title":{},"body":{"injectables/TagsService.html":{}}}],["gettag(id",{"_index":900,"title":{},"body":{"injectables/TagsService.html":{}}}],["getting",{"_index":1135,"title":{"index.html":{}},"body":{}}],["getuserbyemail",{"_index":415,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["getuserbyemail(email",{"_index":420,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["getuserparamdto",{"_index":456,"title":{"classes/GetUserParamDto.html":{}},"body":{"classes/GetUserParamDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["global",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["graph",{"_index":1186,"title":{},"body":{"index.html":{}}}],["group",{"_index":721,"title":{},"body":{"controllers/PostsController.html":{}}}],["grow",{"_index":1210,"title":{},"body":{"index.html":{}}}],["handle",{"_index":973,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["hands",{"_index":1179,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1167,"title":{},"body":{"index.html":{}}}],["hash",{"_index":211,"title":{},"body":{"injectables/BryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashing",{"_index":219,"title":{},"body":{"injectables/BryptProvider.html":{}}}],["hashing.provider",{"_index":213,"title":{},"body":{"injectables/BryptProvider.html":{}}}],["hashingprovider",{"_index":159,"title":{"injectables/HashingProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/UserCreateProvider.html":{},"coverage.html":{},"overview.html":{}}}],["hashpassword",{"_index":200,"title":{},"body":{"injectables/BryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashpassword(password",{"_index":209,"title":{},"body":{"injectables/BryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["headers",{"_index":1043,"title":{},"body":{"controllers/UsersController.html":{}}}],["hello",{"_index":115,"title":{},"body":{"injectables/AppService.html":{},"injectables/SigninProvider.html":{}}}],["help",{"_index":1192,"title":{},"body":{"index.html":{}}}],["here",{"_index":1218,"title":{},"body":{"index.html":{}}}],["host",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":357,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isurl()@isoptional()@maxlength(1024",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["httpexception",{"_index":1000,"title":{},"body":{"injectables/UserService.html":{}}}],["https://nestjs.com",{"_index":1223,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/MetaOptionDto.html":{}}}],["https://schema.org\",\\r\\n",{"_index":355,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/MetaOptionDto.html":{}}}],["httpstatus",{"_index":1001,"title":{},"body":{"injectables/UserService.html":{}}}],["httpstatus.method_not_allowed",{"_index":1011,"title":{},"body":{"injectables/UserService.html":{}}}],["id",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["id'})@apiresponse({status",{"_index":694,"title":{},"body":{"controllers/PostsController.html":{}}}],["identifier",{"_index":1075,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":899,"title":{},"body":{"injectables/TagsService.html":{}}}],["idtag",{"_index":860,"title":{},"body":{"controllers/TagsController.html":{}}}],["img",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["implements",{"_index":216,"title":{},"body":{"injectables/BryptProvider.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["in(ids",{"_index":911,"title":{},"body":{"injectables/TagsService.html":{}}}],["incorrect",{"_index":789,"title":{},"body":{"injectables/PostsService.html":{}}}],["index",{"_index":107,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["inject",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["inject(forwardref",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SigninProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["inject(profileconfig.key",{"_index":1009,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(request",{"_index":579,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["injectable",{"_index":104,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":105,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":425,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/MetaOptionService.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoption",{"_index":516,"title":{},"body":{"injectables/MetaOptionService.html":{},"injectables/PostsService.html":{}}}],["injectrepository(post",{"_index":768,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(tag",{"_index":905,"title":{},"body":{"injectables/TagsService.html":{}}}],["injectrepository(user",{"_index":428,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["installcompile",{"_index":1151,"title":{},"body":{"index.html":{}}}],["integer",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1187,"title":{},"body":{"index.html":{}}}],["interface",{"_index":540,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":542,"title":{},"body":{"interfaces/Paginated.html":{}}}],["interfaces/paginated.interface",{"_index":578,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["intersectiontype",{"_index":450,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["invalid",{"_index":1018,"title":{},"body":{"injectables/UserService.html":{}}}],["ip",{"_index":1044,"title":{},"body":{"controllers/UsersController.html":{}}}],["isarray",{"_index":238,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["isauth",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["isdate()@isoptional",{"_index":447,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["isemail",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isenum",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":350,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(statustype",{"_index":353,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isglobal",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["isint",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/MetaOptionDto.html":{}}}],["isjson()@isoptional",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnotempty",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/MetaOptionDto.html":{},"classes/PatchPostDto.html":{},"classes/SignInDto.html":{}}}],["isnotempty()@isjson",{"_index":499,"title":{},"body":{"classes/MetaOptionDto.html":{}}}],["isoptional",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PaginationQueryDto.html":{}}}],["isoptional()@isint()@ispositive()@min(1)@max(100",{"_index":609,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispositive",{"_index":612,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["isstring",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["isurl",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["itemperpage",{"_index":547,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["items",{"_index":234,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["job",{"_index":1203,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1205,"title":{},"body":{"index.html":{}}}],["joi",{"_index":1112,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1216,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":488,"title":{},"body":{"entities/MetaOption.html":{}}}],["jointable",{"_index":657,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":362,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{}}}],["kamil",{"_index":1220,"title":{},"body":{"index.html":{}}}],["last",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["lastname",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["later",{"_index":439,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["learn",{"_index":1171,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["length(3",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["length(5",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["length(8",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":1226,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1208,"title":{},"body":{"index.html":{}}}],["limit",{"_index":606,"title":{},"body":{"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["line",{"_index":1014,"title":{},"body":{"injectables/UserService.html":{}}}],["linkcurrentpage",{"_index":555,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["linkedin",{"_index":1201,"title":{},"body":{"index.html":{}}}],["linkfirstpage",{"_index":552,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["linklastpage",{"_index":551,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["linknextpage",{"_index":553,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["linkpreviouspage",{"_index":554,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["links",{"_index":544,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["list",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["list'})@apiresponse({status",{"_index":1035,"title":{},"body":{"controllers/UsersController.html":{}}}],["literal",{"_index":546,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["look",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["looking",{"_index":1202,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1197,"title":{},"body":{"index.html":{}}}],["lớp",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["main",{"_index":665,"title":{},"body":{"entities/Post.html":{}}}],["many",{"_index":226,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["many.provider",{"_index":1006,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["many.provider.ts",{"_index":926,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"coverage.html":{}}}],["many.provider.ts:13",{"_index":930,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["many.provider.ts:28",{"_index":932,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["manytomany",{"_index":658,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":652,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":659,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":631,"title":{},"body":{"entities/Post.html":{}}}],["match",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/SigninProvider.html":{}}}],["matches",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":352,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalentity",{"_index":594,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["max",{"_index":613,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["max(100",{"_index":616,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["maxlength",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(100",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(1024",{"_index":358,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":351,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(512",{"_index":382,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["meant",{"_index":663,"title":{},"body":{"entities/Post.html":{}}}],["message",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":1117,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":467,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["metaoption.dto",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{}}}],["metaoption.dto.ts",{"_index":498,"title":{},"body":{"classes/MetaOptionDto.html":{},"coverage.html":{}}}],["metaoption.dto.ts:12",{"_index":500,"title":{},"body":{"classes/MetaOptionDto.html":{}}}],["metaoption.post",{"_index":642,"title":{},"body":{"entities/Post.html":{}}}],["metaoptiondto",{"_index":275,"title":{"classes/MetaOptionDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["metaoptionrepo",{"_index":508,"title":{},"body":{"injectables/MetaOptionService.html":{},"injectables/PostsService.html":{}}}],["metaoptions",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["metaoptionscontroller",{"_index":520,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionservice",{"_index":501,"title":{"injectables/MetaOptionService.html":{}},"body":{"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{},"overview.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules.html":{},"overview.html":{}}}],["metavalue",{"_index":361,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{}}}],["method",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{},"injectables/MetaOptionService.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/UsersController.html":{}}}],["methods",{"_index":108,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["min",{"_index":614,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["min(1",{"_index":615,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["minlength",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["minlength(3",{"_index":381,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["miscellaneous",{"_index":1122,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1207,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1155,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1172,"title":{},"body":{"index.html":{}}}],["multiple",{"_index":898,"title":{},"body":{"injectables/TagsService.html":{}}}],["myśliwiec",{"_index":1221,"title":{},"body":{"index.html":{}}}],["name",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["need",{"_index":1191,"title":{},"body":{"index.html":{}}}],["nest",{"_index":1145,"title":{},"body":{"index.html":{}}}],["nested",{"_index":364,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nestframework",{"_index":1225,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1169,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":577,"title":{},"body":{"injectables/PaginationProvider.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":627,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"classes/MetaOptionDto.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"classes/SignInDto.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/MetaOptionService.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":435,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newmeataoption",{"_index":512,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["newmetaoption",{"_index":528,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["newpost",{"_index":763,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.content",{"_index":804,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.featureimgurl",{"_index":810,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.id",{"_index":797,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.posttype",{"_index":808,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.publishon",{"_index":812,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.slug",{"_index":806,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.status",{"_index":802,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.tags.length",{"_index":793,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpost.title",{"_index":800,"title":{},"body":{"injectables/PostsService.html":{}}}],["newpostrecord",{"_index":771,"title":{},"body":{"injectables/PostsService.html":{}}}],["newrecord",{"_index":517,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["newtag",{"_index":854,"title":{},"body":{"controllers/TagsController.html":{}}}],["newtagdto",{"_index":893,"title":{},"body":{"injectables/TagsService.html":{}}}],["newtagrecord",{"_index":906,"title":{},"body":{"injectables/TagsService.html":{}}}],["newurl",{"_index":589,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?page=${nextpage}&limit=${querypagination.limit",{"_index":603,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?page=${prepage}&limit=${querypagination.limit",{"_index":604,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?page=${querypagination.page}&limit=${querypagination.limit",{"_index":600,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?page=${totalpage}&limit=${querypagination.limit",{"_index":602,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newurl.origin}${newurl.pathname}?page=1&limit=${querypagination.limit",{"_index":601,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["newuser",{"_index":945,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["newuser.email",{"_index":971,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["newuserarray",{"_index":1029,"title":{},"body":{"controllers/UsersController.html":{}}}],["newuserdata",{"_index":977,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["nextpage",{"_index":595,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["node.js",{"_index":1138,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["npm",{"_index":1150,"title":{},"body":{"index.html":{}}}],["nth",{"_index":1038,"title":{},"body":{"controllers/UsersController.html":{}}}],["null",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":477,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUserParamDto.html":{},"entities/MetaOption.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["objectliteral",{"_index":575,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["offer",{"_index":1204,"title":{},"body":{"index.html":{}}}],["official",{"_index":1181,"title":{},"body":{"index.html":{}}}],["on'})@isenum(posttype)@isnotempty",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ondelete",{"_index":481,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["one",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UserService.html":{}}}],["onetomany",{"_index":923,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":920,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":489,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(undefined",{"_index":479,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1209,"title":{},"body":{"index.html":{}}}],["option",{"_index":511,"title":{},"body":{"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{}}}],["option'})@apiresponse({status",{"_index":524,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["option.entity",{"_index":513,"title":{},"body":{"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["option.entity.ts",{"_index":469,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["option.entity.ts:15",{"_index":475,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:21",{"_index":478,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:24",{"_index":473,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:27",{"_index":485,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.entity.ts:33",{"_index":483,"title":{},"body":{"entities/MetaOption.html":{}}}],["option.service",{"_index":530,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["option.service.ts",{"_index":503,"title":{},"body":{"injectables/MetaOptionService.html":{},"coverage.html":{}}}],["option.service.ts:23",{"_index":510,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["option.service.ts:8",{"_index":506,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["optional",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":522,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":538,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":521,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:33",{"_index":527,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["options.module.ts",{"_index":537,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options/dtos/post",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/MetaOptionDto.html":{},"coverage.html":{}}}],["options/meta",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["options/providers/meta",{"_index":502,"title":{},"body":{"injectables/MetaOptionService.html":{},"coverage.html":{}}}],["out",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1230,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1102,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["paginated",{"_index":541,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["paginatedquery",{"_index":564,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatedquery(querypagination",{"_index":569,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":571,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{}}}],["pagination.dto",{"_index":453,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{}}}],["pagination.dto.ts",{"_index":605,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["pagination.dto.ts:10",{"_index":610,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["pagination.dto.ts:17",{"_index":611,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["paginationmodule",{"_index":32,"title":{"modules/PaginationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationprovider",{"_index":559,"title":{"injectables/PaginationProvider.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["paginationquerydto",{"_index":451,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":708,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('userid",{"_index":724,"title":{},"body":{"controllers/PostsController.html":{}}}],["parameters",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params.dto",{"_index":1002,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params.dto.ts",{"_index":458,"title":{},"body":{"classes/GetUserParamDto.html":{},"coverage.html":{}}}],["params.dto.ts:14",{"_index":460,"title":{},"body":{"classes/GetUserParamDto.html":{}}}],["parent",{"_index":491,"title":{},"body":{"entities/MetaOption.html":{}}}],["parseintpipe",{"_index":709,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["part",{"_index":1193,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":622,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":619,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":626,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"injectables/BryptProvider.html":{},"classes/CreateUserDto.html":{},"injectables/HashingProvider.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/User.html":{},"injectables/UserCreateProvider.html":{}}}],["patch",{"_index":710,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":617,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["patchuserdto",{"_index":624,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["person",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/MetaOptionDto.html":{}}}],["person\"\\r\\n",{"_index":356,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/MetaOptionDto.html":{}}}],["pg",{"_index":1114,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":438,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"index.html":{}}}],["port",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":88,"title":{"entities/Post.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":680,"title":{},"body":{"controllers/PostsController.html":{}}}],["post('/create",{"_index":727,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["post('/create/many",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/signin",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('create",{"_index":533,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/UsersController.html":{}}}],["post.author",{"_index":921,"title":{},"body":{"entities/User.html":{}}}],["post.dto",{"_index":623,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["post.dto.ts",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:104",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:11",{"_index":621,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:113",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:12",{"_index":448,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["post.dto.ts:132",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:141",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:32",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:41",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:49",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:61",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:69",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:77",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:8",{"_index":449,"title":{},"body":{"classes/GetPostBaseDto.html":{}}}],["post.dto.ts:86",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:95",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":743,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["post.metaoptions",{"_index":480,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.tags",{"_index":838,"title":{},"body":{"entities/Tag.html":{}}}],["postgres",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["postquery",{"_index":693,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["postquery.limit",{"_index":775,"title":{},"body":{"injectables/PostsService.html":{}}}],["postquery.page",{"_index":776,"title":{},"body":{"injectables/PostsService.html":{}}}],["postrepo",{"_index":751,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":673,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts'})@apiresponse({status",{"_index":689,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":742,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/:userid",{"_index":701,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts/create",{"_index":683,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts/delete",{"_index":688,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts/posts.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":671,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":33,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":711,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["posttype",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":661,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["prepage",{"_index":596,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["primarygeneratedcolumn",{"_index":474,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["process.env.node_env",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1157,"title":{},"body":{"index.html":{}}}],["profileconfig",{"_index":1004,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["progressive",{"_index":1137,"title":{},"body":{"index.html":{}}}],["project",{"_index":1148,"title":{},"body":{"index.html":{}}}],["promise",{"_index":208,"title":{},"body":{"injectables/BryptProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["properties",{"_index":228,"title":{"properties.html":{}},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUserParamDto.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["properties'})@apiresponse({status",{"_index":704,"title":{},"body":{"controllers/PostsController.html":{}}}],["provide",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"classes/PatchPostDto.html":{}}}],["provider",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/PaginationModule.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["provider.ts",{"_index":563,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["provider.ts:23",{"_index":570,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["provider.ts:9",{"_index":567,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/brypt.provider",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/find",{"_index":1070,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/hashing.provider",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/meta",{"_index":529,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/pagination",{"_index":561,"title":{},"body":{"modules/PaginationModule.html":{}}}],["providers/posts.service",{"_index":712,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/signin.provider",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers/tags.service",{"_index":866,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/user",{"_index":1069,"title":{},"body":{"modules/UsersModule.html":{}}}],["providers/users.service",{"_index":1046,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["publishon",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":572,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"controllers/UsersController.html":{}}}],["query('limit",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{}}}],["querypagination",{"_index":573,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["querypagination.limit",{"_index":583,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["querypagination.page",{"_index":585,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["queryrunner",{"_index":937,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.committransaction",{"_index":950,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.connect",{"_index":940,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.create(user",{"_index":946,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.manager.save(newuser",{"_index":947,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.release",{"_index":959,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.rollbacktransaction",{"_index":953,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["queryrunner.starttransaction",{"_index":943,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["questions",{"_index":1173,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":354,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/MetaOptionDto.html":{}}}],["read",{"_index":1217,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["real",{"_index":1188,"title":{},"body":{"index.html":{}}}],["reference",{"_index":493,"title":{},"body":{"entities/MetaOption.html":{}}}],["reflect",{"_index":1116,"title":{},"body":{"dependencies.html":{}}}],["relate",{"_index":668,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/UserService.html":{}}}],["relations",{"_index":777,"title":{},"body":{"injectables/PostsService.html":{}}}],["relationship",{"_index":497,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["release",{"_index":958,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["repo",{"_index":515,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["repository",{"_index":417,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/MetaOptionService.html":{},"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"injectables/TagsService.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"index.html":{}}}],["repository.count",{"_index":593,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repository.find",{"_index":581,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["repositoyr",{"_index":767,"title":{},"body":{"injectables/PostsService.html":{}}}],["req",{"_index":568,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["request",{"_index":566,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception",{"_index":423,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["requesttimeoutexception('could",{"_index":960,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["requesttimeoutexception('please",{"_index":972,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["requesttimeoutexception('something",{"_index":782,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["required",{"_index":233,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1165,"title":{},"body":{"index.html":{}}}],["result",{"_index":580,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UserCreateManyProvider.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":114,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["return'})@post('/create/many",{"_index":1027,"title":{},"body":{"controllers/UsersController.html":{}}}],["return'})@post('create",{"_index":1031,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":112,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PaginationProvider.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":1132,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["rollback",{"_index":951,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["run",{"_index":1152,"title":{},"body":{"index.html":{}}}],["runner",{"_index":936,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["rxjs",{"_index":1119,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["salt",{"_index":217,"title":{},"body":{"injectables/BryptProvider.html":{}}}],["save",{"_index":815,"title":{},"body":{"injectables/PostsService.html":{}}}],["scalable",{"_index":1142,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":1131,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["series",{"_index":1128,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":981,"title":{},"body":{"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"index.html":{}}}],["service",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["set",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{}}}],["setup",{"_index":1149,"title":{},"body":{"index.html":{}}}],["side",{"_index":1143,"title":{},"body":{"index.html":{}}}],["sidebar",{"_index":363,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["siginprovider",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["signin",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SigninProvider.html":{}}}],["signin(@body",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(signindto",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SigninProvider.html":{}}}],["signin.provider",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["signindto",{"_index":125,"title":{"classes/SignInDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"coverage.html":{}}}],["signinprovider",{"_index":160,"title":{"injectables/SigninProvider.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/SigninProvider.html":{},"coverage.html":{},"overview.html":{}}}],["skip",{"_index":584,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{}}}],["slug",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["soft",{"_index":862,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["softdelete",{"_index":848,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(@query('id",{"_index":876,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(idtag",{"_index":861,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdeletetag",{"_index":887,"title":{},"body":{"injectables/TagsService.html":{}}}],["softdeletetag(id",{"_index":902,"title":{},"body":{"injectables/TagsService.html":{}}}],["something",{"_index":436,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserCreateProvider.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["sourse",{"_index":939,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["sponsors",{"_index":1212,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1134,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":1124,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../statustype.enum.ts",{"_index":1125,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":106,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":111,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:25",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1068,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/singin.dto.ts",{"_index":817,"title":{},"body":{"classes/SignInDto.html":{},"coverage.html":{}}}],["src/auth/dtos/singin.dto.ts:11",{"_index":819,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/dtos/singin.dto.ts:19",{"_index":821,"title":{},"body":{"classes/SignInDto.html":{}}}],["src/auth/providers/auth.service",{"_index":1003,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:28",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:35",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:8",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/brypt.provider",{"_index":967,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["src/auth/providers/brypt.provider.ts",{"_index":198,"title":{},"body":{"injectables/BryptProvider.html":{},"coverage.html":{}}}],["src/auth/providers/brypt.provider.ts:13",{"_index":210,"title":{},"body":{"injectables/BryptProvider.html":{}}}],["src/auth/providers/brypt.provider.ts:24",{"_index":204,"title":{},"body":{"injectables/BryptProvider.html":{}}}],["src/auth/providers/hashing.provider",{"_index":968,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["src/auth/providers/hashing.provider.ts",{"_index":463,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/auth/providers/hashing.provider.ts:13",{"_index":464,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/hashing.provider.ts:8",{"_index":465,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/auth/providers/signin.provider.ts",{"_index":823,"title":{},"body":{"injectables/SigninProvider.html":{},"coverage.html":{}}}],["src/auth/providers/signin.provider.ts:22",{"_index":825,"title":{},"body":{"injectables/SigninProvider.html":{}}}],["src/auth/providers/signin.provider.ts:7",{"_index":824,"title":{},"body":{"injectables/SigninProvider.html":{}}}],["src/common/pagination/dtos/query",{"_index":452,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/common/pagination/interfaces/paginated.interface",{"_index":766,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/common/pagination/interfaces/paginated.interface.ts",{"_index":543,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/common/pagination/pagination.module",{"_index":745,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/common/pagination/pagination.module.ts",{"_index":560,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/common/pagination/providers/pagination",{"_index":562,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":1088,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":468,"title":{},"body":{"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/dtos/create",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/get",{"_index":444,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":618,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":1126,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/statustype.enum.ts",{"_index":1129,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity",{"_index":486,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/posts/post.entity.ts",{"_index":629,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:100",{"_index":655,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:19",{"_index":641,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:26",{"_index":656,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:33",{"_index":638,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:41",{"_index":644,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:49",{"_index":650,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:57",{"_index":651,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:63",{"_index":636,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:69",{"_index":647,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:76",{"_index":640,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:82",{"_index":646,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:88",{"_index":643,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:94",{"_index":634,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":672,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:102",{"_index":691,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:115",{"_index":706,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:130",{"_index":687,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:69",{"_index":700,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:87",{"_index":682,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":741,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":747,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:115",{"_index":758,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:124",{"_index":757,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:149",{"_index":762,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:26",{"_index":754,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:59",{"_index":756,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:79",{"_index":760,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/dtos/create",{"_index":368,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service",{"_index":765,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/tags/providers/tags.service.ts",{"_index":884,"title":{},"body":{"injectables/TagsService.html":{},"coverage.html":{}}}],["src/tags/providers/tags.service.ts:11",{"_index":889,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:25",{"_index":892,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:34",{"_index":901,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:41",{"_index":897,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:54",{"_index":895,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/providers/tags.service.ts:66",{"_index":903,"title":{},"body":{"injectables/TagsService.html":{}}}],["src/tags/tag.entity",{"_index":660,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{}}}],["src/tags/tag.entity.ts",{"_index":829,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":836,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":837,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:31",{"_index":842,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:37",{"_index":834,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:43",{"_index":840,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:50",{"_index":835,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:55",{"_index":839,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:58",{"_index":831,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:61",{"_index":843,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:64",{"_index":833,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":845,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:39",{"_index":852,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:55",{"_index":858,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:71",{"_index":864,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":744,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/tags/tags.module.ts",{"_index":881,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":225,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":457,"title":{},"body":{"classes/GetUserParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":625,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/find",{"_index":413,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"coverage.html":{}}}],["src/users/providers/user",{"_index":925,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{}}}],["src/users/providers/users.service.ts",{"_index":982,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:115",{"_index":992,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:124",{"_index":999,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:27",{"_index":990,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:65",{"_index":993,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:72",{"_index":995,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/users.service.ts:94",{"_index":998,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.entity",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{}}}],["src/users/user.entity.ts",{"_index":914,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:14",{"_index":916,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":918,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:29",{"_index":915,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:36",{"_index":919,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:41",{"_index":922,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":917,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1022,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:105",{"_index":1041,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":1039,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:82",{"_index":1032,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:97",{"_index":1028,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":1066,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":941,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"index.html":{}}}],["start:dev",{"_index":1156,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1158,"title":{},"body":{"index.html":{}}}],["startdate",{"_index":446,"title":{},"body":{"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{}}}],["started",{"_index":1136,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1147,"title":{},"body":{"index.html":{}}}],["statements",{"_index":1076,"title":{},"body":{"coverage.html":{}}}],["statu",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["status",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/SigninProvider.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["statustype",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["statustype.draft",{"_index":662,"title":{},"body":{"entities/Post.html":{}}}],["stay",{"_index":1196,"title":{},"body":{"index.html":{}}}],["story",{"_index":1127,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["string",{"_index":113,"title":{},"body":{"injectables/AppService.html":{},"injectables/BryptProvider.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"interfaces/Paginated.html":{},"entities/Post.html":{},"classes/SignInDto.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["string(error",{"_index":956,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["success",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"injectables/UserCreateManyProvider.html":{},"controllers/UsersController.html":{}}}],["success'})@apiparam({name",{"_index":695,"title":{},"body":{"controllers/PostsController.html":{}}}],["success'})@delete('/soft",{"_index":863,"title":{},"body":{"controllers/TagsController.html":{}}}],["success'})@post('/create",{"_index":851,"title":{},"body":{"controllers/TagsController.html":{}}}],["success'})@post('create",{"_index":526,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["successfull",{"_index":726,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfull'})@delete('/delete",{"_index":686,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfull'})@post('/create",{"_index":681,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully",{"_index":732,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TagsController.html":{}}}],["successfully'})@patch",{"_index":705,"title":{},"body":{"controllers/PostsController.html":{}}}],["sucessfully",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{}}}],["sucessfully'})@apiquery({name",{"_index":1036,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":1174,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1228,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":461,"title":{},"body":{"classes/GetUserParamDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["synchronize",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["t",{"_index":545,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":1101,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1100,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":374,"title":{"entities/Tag.html":{}},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{}}}],["tag'})@apiresponse({status",{"_index":850,"title":{},"body":{"controllers/TagsController.html":{}}}],["tag.dto",{"_index":867,"title":{},"body":{"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tag.dto.ts",{"_index":369,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:22",{"_index":376,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:34",{"_index":379,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:42",{"_index":372,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:51",{"_index":377,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:60",{"_index":373,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":868,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{}}}],["tag.posts",{"_index":653,"title":{},"body":{"entities/Post.html":{}}}],["tagrepo",{"_index":890,"title":{},"body":{"injectables/TagsService.html":{}}}],["tags",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{}}}],["tags.controller",{"_index":882,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags.length",{"_index":792,"title":{},"body":{"injectables/PostsService.html":{}}}],["tags/create",{"_index":853,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/delete",{"_index":859,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/soft",{"_index":865,"title":{},"body":{"controllers/TagsController.html":{}}}],["tags/tags.module",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["tagscontroller",{"_index":844,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagservice",{"_index":752,"title":{},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{}}}],["tagsmodule",{"_index":34,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":753,"title":{"injectables/TagsService.html":{}},"body":{"injectables/PostsService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/TagsService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":582,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/PostsService.html":{}}}],["test",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["test(getuserparamdto",{"_index":1033,"title":{},"body":{"controllers/UsersController.html":{}}}],["test3",{"_index":1024,"title":{},"body":{"controllers/UsersController.html":{}}}],["test3(@body",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["test3(body",{"_index":1040,"title":{},"body":{"controllers/UsersController.html":{}}}],["test:covresources",{"_index":1163,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1162,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1159,"title":{},"body":{"index.html":{}}}],["text",{"_index":635,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["th",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["thanks",{"_index":1211,"title":{},"body":{"index.html":{}}}],["thepost",{"_index":780,"title":{},"body":{"injectables/PostsService.html":{}}}],["thepost.affected",{"_index":786,"title":{},"body":{"injectables/PostsService.html":{}}}],["thepost.content",{"_index":803,"title":{},"body":{"injectables/PostsService.html":{}}}],["thepost.featureimgurl",{"_index":809,"title":{},"body":{"injectables/PostsService.html":{}}}],["thepost.posttype",{"_index":807,"title":{},"body":{"injectables/PostsService.html":{}}}],["thepost.publishon",{"_index":811,"title":{},"body":{"injectables/PostsService.html":{}}}],["thepost.slug",{"_index":805,"title":{},"body":{"injectables/PostsService.html":{}}}],["thepost.status",{"_index":801,"title":{},"body":{"injectables/PostsService.html":{}}}],["thepost.tags",{"_index":814,"title":{},"body":{"injectables/PostsService.html":{}}}],["thepost.title",{"_index":799,"title":{},"body":{"injectables/PostsService.html":{}}}],["theuser",{"_index":1016,"title":{},"body":{"injectables/UserService.html":{}}}],["thing",{"_index":664,"title":{},"body":{"entities/Post.html":{}}}],["this.authservice.signin(signindto",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.datasource.createqueryrunner",{"_index":938,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["this.finduserbyemailprovider.getuserbyemail(email",{"_index":1020,"title":{},"body":{"injectables/UserService.html":{}}}],["this.hashingprovider.hashpassword(newuser.password",{"_index":979,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["this.metaoptionrepo.create(newmeataoption",{"_index":518,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["this.metaoptionrepo.save(newrecord",{"_index":519,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["this.metaoptionservice.createmetaoption(newmetaoption",{"_index":534,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.paginationprovider.paginatedquery",{"_index":778,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepo",{"_index":779,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepo.create",{"_index":772,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepo.delete(id",{"_index":781,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepo.find",{"_index":774,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepo.findoneby",{"_index":796,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepo.save(newpostrecord",{"_index":773,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepo.save(thepost",{"_index":816,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(createpostdto",{"_index":729,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(id",{"_index":737,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpost",{"_index":731,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallpostbyuserid(userid",{"_index":725,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(updatepatchdto",{"_index":734,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.req.headers.host",{"_index":588,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.req.protocol",{"_index":587,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["this.siginprovider.signin(signindto",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.tagrepo.create(newtagdto",{"_index":907,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepo.delete(id",{"_index":912,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepo.find",{"_index":910,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepo.findoneby",{"_index":909,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepo.save(newtagrecord",{"_index":908,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagrepo.softdelete(id",{"_index":913,"title":{},"body":{"injectables/TagsService.html":{}}}],["this.tagservice.createtag(newtag",{"_index":872,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagservice.deletetag(idtag",{"_index":874,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagservice.getmultiptag(createpostdto.tags",{"_index":770,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagservice.getmultiptag(newpost.tags",{"_index":791,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.tagservice.softdeletetag(idtag",{"_index":877,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.usercreate.createuser(newuser",{"_index":1010,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usercreatmanyprovider.createmultip(createusersdto",{"_index":1019,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepo.create",{"_index":978,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["this.userrepo.findone",{"_index":970,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["this.userrepo.findoneby",{"_index":431,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserService.html":{}}}],["this.userrepo.save(newuserdata",{"_index":980,"title":{},"body":{"injectables/UserCreateProvider.html":{}}}],["this.userservice.createmultip(newuserarray",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.createuser(newuser",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall(getuserparamdto",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findone(createpostdto.authorid",{"_index":769,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.userservice.getuserbyemail(signindto.email",{"_index":827,"title":{},"body":{"injectables/SigninProvider.html":{}}}],["throw",{"_index":434,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["time",{"_index":783,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["timestamp",{"_index":645,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["to'})@isint()@isnotempty",{"_index":620,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["toan",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["toan@gmail.com",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/SignInDto.html":{}}}],["toan@gmail.com'})@isnotempty()@isemail",{"_index":818,"title":{},"body":{"classes/SignInDto.html":{}}}],["toan@gmail.com'})@isstring()@isnotempty()@isemail()@length(8",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["token",{"_index":828,"title":{},"body":{"injectables/SigninProvider.html":{}}}],["totalentity",{"_index":592,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["totalitem",{"_index":548,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpage",{"_index":550,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1219,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":942,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["transform",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["transformer",{"_index":243,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/GetUserParamDto.html":{},"classes/PaginationQueryDto.html":{},"dependencies.html":{}}}],["true",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{}}}],["true})@jointable",{"_index":654,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":430,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":1224,"title":{},"body":{"index.html":{}}}],["type",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BryptProvider.html":{},"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetPostBaseDto.html":{},"classes/GetUserParamDto.html":{},"injectables/HashingProvider.html":{},"entities/MetaOption.html":{},"classes/MetaOptionDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/SignInDto.html":{},"injectables/SigninProvider.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["typeorm",{"_index":427,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"injectables/PaginationProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/Tag.html":{},"injectables/TagsService.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([metaoption",{"_index":539,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":746,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([tag",{"_index":883,"title":{},"body":{"modules/TagsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1071,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":628,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1146,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":424,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{}}}],["undefined",{"_index":429,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["undefined})@arraynotempty()@isarray()@type(undefined)@validatenested({each",{"_index":235,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["undefined})@isarray()@isoptional()@isint({each",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":648,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1160,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"injectables/TagsService.html":{},"injectables/UserCreateManyProvider.html":{}}}],["unlicensed",{"_index":1238,"title":{},"body":{"properties.html":{}}}],["up",{"_index":720,"title":{},"body":{"controllers/PostsController.html":{}}}],["update",{"_index":703,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatedate",{"_index":471,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":484,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepatchdto",{"_index":707,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost",{"_index":678,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@body",{"_index":733,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(newpost",{"_index":761,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost(updatepatchdto",{"_index":702,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":1198,"title":{},"body":{"index.html":{}}}],["url",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/PaginationProvider.html":{}}}],["url(this.req.url",{"_index":590,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["useclass",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["usefactory",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":87,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateManyUsersDto.html":{},"injectables/FindUserByEmailProvider.html":{},"classes/GetUserParamDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"entities/User.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user'})@apiresponse({status",{"_index":1030,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":242,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/PatchUserDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:19",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:50",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":426,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["user.posts",{"_index":632,"title":{},"body":{"entities/Post.html":{}}}],["usercreate",{"_index":989,"title":{},"body":{"injectables/UserService.html":{}}}],["usercreatemanyprovider",{"_index":924,"title":{"injectables/UserCreateManyProvider.html":{}},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usercreateprovider",{"_index":961,"title":{"injectables/UserCreateProvider.html":{}},"body":{"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usercreatmanyprovider",{"_index":988,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":696,"title":{},"body":{"controllers/PostsController.html":{}}}],["username",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepo",{"_index":419,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["users",{"_index":229,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/GetUserParamDto.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["users'})@apiresponse({status",{"_index":1026,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1067,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.dto",{"_index":935,"title":{},"body":{"injectables/UserCreateManyProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["users.dto.ts",{"_index":227,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"coverage.html":{}}}],["users.dto.ts:18",{"_index":236,"title":{},"body":{"classes/CreateManyUsersDto.html":{}}}],["users.push(result",{"_index":948,"title":{},"body":{"injectables/UserCreateManyProvider.html":{}}}],["users.service.ts",{"_index":1013,"title":{},"body":{"injectables/UserService.html":{}}}],["users/users.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":1021,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":183,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/SigninProvider.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":35,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["using",{"_index":1189,"title":{},"body":{"index.html":{}}}],["valid",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validate",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":239,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{}}}],["validationpipe",{"_index":1045,"title":{},"body":{"controllers/UsersController.html":{}}}],["validationschema",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":240,"title":{},"body":{"classes/CreateManyUsersDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetPostBaseDto.html":{},"classes/GetPostDto.html":{},"classes/GetUserParamDto.html":{},"classes/MetaOptionDto.html":{},"classes/PaginationQueryDto.html":{},"classes/PatchPostDto.html":{},"classes/SignInDto.html":{},"dependencies.html":{}}}],["value",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["varchar",{"_index":637,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":1078,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1239,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vcl",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["version",{"_index":1236,"title":{},"body":{"properties.html":{}}}],["video",{"_index":1182,"title":{},"body":{"index.html":{}}}],["viral",{"_index":380,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["viral'})@isstring()@minlength(3)@maxlength(256)@isnotempty",{"_index":375,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["visit",{"_index":1170,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1184,"title":{},"body":{"index.html":{}}}],["void",{"_index":996,"title":{},"body":{"injectables/UserService.html":{}}}],["want",{"_index":366,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["watch",{"_index":1154,"title":{},"body":{"index.html":{}}}],["website",{"_index":1222,"title":{},"body":{"index.html":{}}}],["working",{"_index":1168,"title":{},"body":{"index.html":{}}}],["world",{"_index":116,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":437,"title":{},"body":{"injectables/FindUserByEmailProvider.html":{},"injectables/PostsService.html":{},"injectables/UserCreateManyProvider.html":{},"injectables/UserCreateProvider.html":{},"injectables/UserService.html":{}}}],["x",{"_index":1200,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1215,"title":{},"body":{"index.html":{}}}],["z0",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d\\s]{8",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)[a",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["zoom",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PaginationModule.html":{},"modules/PostsModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PaginationModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { PaginationModule } from './common/pagination/pagination.module';\nimport appConfig from './config/app.config';\nimport databaseConfig from './config/database.config';\nimport environmentValidation from './config/environment.validation';\n\nconst ENV = process.env.NODE_ENV;\n\n@Module({\n  imports: [\n    UsersModule,\n    PostsModule,\n    AuthModule,\n    ConfigModule.forRoot({\n      isGlobal: true, // set config service to global\n      // envFilePath: ['.env.development'],\n      envFilePath: !ENV ? '.env' : `.env.${ENV}`.trim(), // choose file env depend on file NODE_ENV\n      load: [appConfig, databaseConfig], // load config\n      validationSchema: environmentValidation, // validate environment\n    }),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        // entities: [User, Post],\n        autoLoadEntities: configService.get(\n          'database.autoLoadEntities',\n        ),\n        synchronize: configService.get('database.synchronize'),\n        port: configService.get('database.port'),\n        username: configService.get('database.username'),\n        password: configService.get('database.password'),\n        host: configService.get('database.host'),\n        database: configService.get('database.database'),\n      }),\n    }),\n    TagsModule,\n    MetaOptionsModule,\n    PaginationModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                    Async\n                                signin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                            Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                        \n                    signin(signinDto: SignInDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'signin '})@ApiResponse({status: 200, description: 'login success when statu = 200'})@Post('/signin')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        signin\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signinDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { SignInDto } from './dtos/singin.dto';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('auth')\n@ApiTags('Authentication')\nexport class AuthController {\n  /**\n   * constructor\n   */\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * signin\n   */\n  @ApiOperation({\n    summary: 'signin ',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'login success when statu = 200',\n  })\n  @Post('/signin')\n  public async signin(@Body() signinDto: SignInDto) {\n    return this.authService.signin(signinDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nSigninProvider\n\nSigninProvider\n\nAuthModule -->\n\nSigninProvider->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            SigninProvider\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BryptProvider } from './providers/brypt.provider';\nimport { SigninProvider } from './providers/signin.provider';\n\n@Module({\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingProvider, // provider Cung cấp abstract class\n      useClass: BryptProvider, // provider sử dụng lớp cụ thể\n    },\n    SigninProvider,\n  ],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService, HashingProvider],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                    Async\n                                signin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, siginProvider: SigninProvider)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        siginProvider\n                                                  \n                                                        \n                                                                        SigninProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:35\n                        \n                    \n\n\n            \n                \n                        test method\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                        \n                    signin(signinDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:28\n                        \n                    \n\n\n            \n                \n                        signin\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signinDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/users.service';\nimport { SignInDto } from '../dtos/singin.dto';\nimport { User } from 'src/users/user.entity';\nimport { SigninProvider } from './signin.provider';\n\n@Injectable()\nexport class AuthService {\n  /**\n   * constructor\n   */\n  constructor(\n    /**\n     * inject userService\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n\n    /**\n     * inject signin provider\n     */\n    private readonly siginProvider: SigninProvider,\n  ) {}\n\n  /**\n   * signin\n   */\n  public async signin(signinDto: SignInDto) {\n    return await this.siginProvider.signin(signinDto);\n  }\n\n  /**\n   * test method\n   */\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BryptProvider.html":{"url":"injectables/BryptProvider.html","title":"injectable - BryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/brypt.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                comparedPassword\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        comparedPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparedPassword(data: string | Buffer, encryped: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/brypt.provider.ts:24\n                        \n                    \n\n\n            \n                \n                        compare password function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryped\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(password: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/brypt.provider.ts:13\n                        \n                    \n\n\n            \n                \n                        hash password funciton\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { HashingProvider } from './hashing.provider';\nimport * as bcrypt from 'bcrypt';\n\n@Injectable()\n/**\n * brypt class\n */\nexport class BryptProvider implements HashingProvider {\n  /**\n   * hash password funciton\n   */\n  async hashPassword(password: string | Buffer): Promise {\n    // salt\n    const salt: string = await bcrypt.genSalt();\n\n    // hashing\n    return await bcrypt.hash(password, salt);\n  }\n\n  /**\n   * compare password function\n   */\n  async comparedPassword(\n    data: string | Buffer,\n    encryped: string,\n  ): Promise {\n    // compared password\n    return await bcrypt.compare(data, encryped);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateManyUsersDto.html":{"url":"classes/CreateManyUsersDto.html","title":"class - CreateManyUsersDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateManyUsersDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-many-users.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateUserDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', required: true, items: undefined})@ArrayNotEmpty()@IsArray()@Type(undefined)@ValidateNested({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-many-users.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ArrayNotEmpty, IsArray, ValidateNested } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { Type } from 'class-transformer';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateManyUsersDto {\n  @ApiProperty({\n    type: 'array',\n    required: true,\n    items: {\n      type: 'User',\n    },\n  })\n  @ArrayNotEmpty()\n  @IsArray()\n  @Type(() => CreateUserDto)\n  @ValidateNested({ each: true })\n  users: CreateUserDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featureImgUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'integer', required: true, example: 1})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:141\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'this is content', example: 'the content'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'enter description', example: 'description 1'})@IsString()@IsNotEmpty()@MaxLength(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featureImgUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'img URL', example: 'http://localhost.com/images/image1.jpg'})@IsUrl()@IsOptional()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOptionDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', required: false, items: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:132\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'add a valid value post, page and so on'})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'date on which post is published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:104\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'this is schema', example: '{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Person\"\n  }'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'a slug look like abc-def-vcl', example: 'toan-dep-dai'})@IsString()@IsNotEmpty()@MaxLength(256)@Matches(/^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$/, {message: 'slug does not match'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         statusType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: statusType, description: 'add valid status in enum'})@IsEnum(statusType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'list of id tags', example: undefined})@IsArray()@IsOptional()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:113\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'this is title and length between 5 and 100', example: 'Toan dep dai'})@IsString()@IsNotEmpty()@Length(5, 100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Transform, Type } from 'class-transformer';\nimport {\n  IsArray,\n  IsDate,\n  IsEnum,\n  IsInt,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Length,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { postType } from '../enums/postType.enum';\nimport { statusType } from '../enums/statusType.enum';\nimport { MetaOptionDto } from '../../meta-options/dtos/post-metaOption.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'this is title and length between 5 and 100',\n    example: 'Toan dep dai',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(5, 100)\n  title: string;\n\n  @ApiProperty({\n    description: 'enter description',\n    example: 'description 1',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(100)\n  description: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: 'add a valid value post, page and so on',\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description: 'a slug look like abc-def-vcl',\n    example: 'toan-dep-dai',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(256)\n  @Matches(/^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$/, {\n    message: 'slug does not match',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: statusType,\n    description: 'add valid status in enum',\n  })\n  @IsEnum(statusType)\n  @IsNotEmpty()\n  status: statusType;\n\n  @ApiPropertyOptional({\n    description: 'this is content',\n    example: 'the content',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description: 'this is schema',\n    example:\n      '{\\r\\n    \"@context\": \"https://schema.org\",\\r\\n    \"@type\": \"Person\"\\r\\n  }',\n  })\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'img URL',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  @MaxLength(1024)\n  featureImgUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'date on which post is published',\n\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'list of id tags',\n    example: [1, 2],\n  })\n  @IsArray()\n  @IsOptional()\n  @IsInt({ each: true })\n  tags?: number[];\n\n  @ApiPropertyOptional({\n    type: 'object',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'value is json',\n          example: '{\"sidebar\": true}',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true }) // validate nested dto\n  @Type(() => MetaOptionDto) // choose type dto you want to match\n  metaOptions?: MetaOptionDto | null;\n\n  @ApiProperty({\n    type: 'integer',\n    required: true,\n    example: 1,\n  })\n  @IsInt()\n  @IsNotEmpty()\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImgUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'enter description', example: 'description 1'})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImgUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'img url', example: 'http://localhost.com/images/image1.jpg'})@IsUrl()@IsOptional()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'name tag', example: 'viral'})@IsString()@MinLength(3)@MaxLength(256)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'enter schema', example: '{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Person\"\n  }'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'a slug look like abc-def-vcl', example: 'toan-dep-dai'})@IsString()@IsNotEmpty()@MaxLength(512)@Matches(/^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$/, {message: 'slug does not match'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateTagDto {\n  @ApiProperty({\n    description: 'name tag',\n    example: 'viral',\n  })\n  @IsString()\n  @MinLength(3)\n  @MaxLength(256)\n  @IsNotEmpty()\n  name: string;\n\n  @ApiProperty({\n    description: 'a slug look like abc-def-vcl',\n    example: 'toan-dep-dai',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(512)\n  @Matches(/^[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*$/, {\n    message: 'slug does not match',\n  })\n  slug: string;\n\n  @ApiPropertyOptional({\n    description: 'enter description',\n    example: 'description 1',\n  })\n  @IsOptional()\n  @IsString()\n  description?: string;\n\n  @ApiPropertyOptional({\n    description: 'enter schema',\n    example:\n      '{\\r\\n    \"@context\": \"https://schema.org\",\\r\\n    \"@type\": \"Person\"\\r\\n  }',\n  })\n  @IsJSON()\n  @IsOptional()\n  schema?: string;\n\n  @ApiPropertyOptional({\n    description: 'img url',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  @MaxLength(1024)\n  featuredImgUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'email', example: 'toan@gmail.com'})@IsString()@IsNotEmpty()@IsEmail()@Length(8, 96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'enter the first name', example: 'toan dep dai'})@IsString()@IsNotEmpty()@Length(3, 96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Enter last name', example: 'toan big duck'})@IsString()@Length(3, 100)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'password', example: '123456a'})@IsString()@IsNotEmpty()@Length(8, 96)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d\\S]{8,}$/, {message: 'password has at least one character and one number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:50\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'enter the first name',\n    example: 'toan dep dai',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(3, 96)\n  firstName: string;\n\n  @ApiPropertyOptional({\n    description: 'Enter last name',\n    example: 'toan big duck',\n  })\n  @IsString()\n  @Length(3, 100)\n  @IsOptional()\n  lastName?: string;\n\n  @ApiProperty({\n    description: 'email',\n    example: 'toan@gmail.com',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @IsEmail()\n  @Length(8, 96)\n  email: string;\n\n  @ApiProperty({\n    description: 'password',\n    example: '123456a',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Length(8, 96)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d\\S]{8,}$/, {\n    message: 'password has at least one character and one number',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FindUserByEmailProvider.html":{"url":"injectables/FindUserByEmailProvider.html","title":"injectable - FindUserByEmailProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FindUserByEmailProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/find-user-by-email.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/find-user-by-email.provider.ts:11\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/find-user-by-email.provider.ts:25\n                        \n                    \n\n\n            \n                \n                        find an user by email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  RequestTimeoutException,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class FindUserByEmailProvider {\n  /**\n   * constructor\n   */\n  constructor(\n    /**\n     * inject user repository\n     */\n    @InjectRepository(User) private readonly userRepo: Repository,\n  ) {}\n\n  /**\n   * find an user by email\n   */\n  public async getUserByEmail(email: string): Promise {\n    // get user\n    let user: User | undefined = undefined;\n    try {\n      user = await this.userRepo.findOneBy({ email: email });\n    } catch (error) {\n      throw new RequestTimeoutException(\n        error,\n        'something wrong please try later',\n      );\n    }\n\n    // not exist throw exception\n    if (!user) {\n      throw new UnauthorizedException(\n        'email does not exist please try another',\n      );\n    }\n\n    // exist return the user\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostBaseDto.html":{"url":"classes/GetPostBaseDto.html","title":"class - GetPostBaseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostBaseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                endDate\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                startDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        endDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        startDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDate()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/get-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { IsDate, IsOptional } from 'class-validator';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/query-pagination.dto';\n\nclass GetPostBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(\n  GetPostBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostDto.html":{"url":"classes/GetPostDto.html","title":"class - GetPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/get-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IntersectionType(\n  GetPostBaseDto,\n  PaginationQueryDto,\n)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IntersectionType } from '@nestjs/swagger';\nimport { IsDate, IsOptional } from 'class-validator';\nimport { PaginationQueryDto } from 'src/common/pagination/dtos/query-pagination.dto';\n\nclass GetPostBaseDto {\n  @IsDate()\n  @IsOptional()\n  startDate?: Date;\n\n  @IsDate()\n  @IsOptional()\n  endDate?: Date;\n}\n\nexport class GetPostDto extends IntersectionType(\n  GetPostBaseDto,\n  PaginationQueryDto,\n) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamDto.html":{"url":"classes/GetUserParamDto.html","title":"class - GetUserParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'enter an user id', example: 123})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-params.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from '@nestjs/swagger';\nimport { Type } from 'class-transformer';\nimport { IsInt, IsOptional } from 'class-validator';\n\nexport class GetUserParamDto {\n  // add optional to data to swagger\n  @ApiPropertyOptional({\n    description: 'enter an user id',\n    example: 123,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/hashing.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                comparedPassword\n                            \n                            \n                                    Abstract\n                                hashPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        comparedPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    comparedPassword(data: string | Buffer, encryped: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:13\n                        \n                    \n\n\n            \n                \n                        compare password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encryped\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashPassword(password: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/hashing.provider.ts:8\n                        \n                    \n\n\n            \n                \n                        hash password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                password\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingProvider {\n  /**\n   * hash password\n   */\n  abstract hashPassword(password: string | Buffer): Promise;\n\n  /**\n   * compare password\n   */\n  abstract comparedPassword(\n    data: string | Buffer,\n    encryped: string,\n  ): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-option.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-option.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class MetaOption {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'json',\n    nullable: false,\n  })\n  metaValue: string;\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @OneToOne(() => Post, (post) => post.metaOptions, {\n    onDelete: 'CASCADE', // when parent entity be deleted then all entity reference to parent entity will be deleted also\n  }) // convert it bo bidirectional relationship\n  @JoinColumn()\n  post: Post;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MetaOptionDto.html":{"url":"classes/MetaOptionDto.html","title":"class - MetaOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MetaOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/post-metaOption.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'metaValue must be an json', example: '{\n    \"@context\": \"https://schema.org\",\n    \"@type\": \"Person\"\n  }'})@IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/post-metaOption.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsJSON, IsNotEmpty } from 'class-validator';\n\nexport class MetaOptionDto {\n  @ApiProperty({\n    description: 'metaValue must be an json',\n    example:\n      '{\\r\\n    \"@context\": \"https://schema.org\",\\r\\n    \"@type\": \"Person\"\\r\\n  }',\n  })\n  @IsNotEmpty()\n  @IsJSON()\n  metaValue: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionService.html":{"url":"injectables/MetaOptionService.html","title":"injectable - MetaOptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/meta-option.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/meta-option.service.ts:8\n                            \n                        \n\n                \n                    \n                            contructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(newMeataOption: MetaOptionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/meta-option.service.ts:23\n                        \n                    \n\n\n            \n                \n                        create meta option method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newMeataOption\n                                            \n                                                            MetaOptionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from '../meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { MetaOptionDto } from '../dtos/post-metaOption.dto';\n\n@Injectable()\nexport class MetaOptionService {\n  /**\n   * contructor\n   */\n  constructor(\n    /**\n     * inject meta option repo\n     */\n    @InjectRepository(MetaOption)\n    private readonly metaOptionRepo: Repository,\n  ) {}\n\n  /**\n   * create meta option method\n   */\n  public async createMetaOption(\n    newMeataOption: MetaOptionDto,\n  ): Promise {\n    let newRecord: MetaOption = this.metaOptionRepo.create(newMeataOption);\n    newRecord = await this.metaOptionRepo.save(newRecord);\n    return newRecord;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(newMetaOption: MetaOptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'create a new meta option'})@ApiResponse({status: 201, description: 'create new meta option success'})@Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:33\n                        \n                    \n\n\n            \n                \n                        create meta option\n[POST]\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newMetaOption\n                                            \n                                                            MetaOptionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Inject, Post } from '@nestjs/common';\nimport { MetaOptionService } from './providers/meta-option.service';\nimport { MetaOptionDto } from './dtos/post-metaOption.dto';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { MetaOption } from './meta-option.entity';\n\n@Controller('meta-options')\n@ApiTags('meta-option')\nexport class MetaOptionsController {\n  /**\n   *\n   * contructor\n   */\n  constructor(\n    /**\n     * inject meta service\n     */\n    private readonly metaOptionService: MetaOptionService,\n  ) {}\n\n  /**\n   * create meta option\n   * [POST]\n   */\n  @ApiOperation({\n    summary: 'create a new meta option',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'create new meta option success',\n  })\n  @Post('create')\n  public createMetaOption(\n    @Body() newMetaOption: MetaOptionDto,\n  ): Promise {\n    return this.metaOptionService.createMetaOption(newMetaOption);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionService\n\nMetaOptionService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { MetaOptionService } from './providers/meta-option.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-option.entity';\n\n@Module({\n  controllers: [MetaOptionsController],\n  providers: [MetaOptionService],\n  imports: [TypeOrmModule.forFeature([MetaOption])],\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[];\n\n  meta: {\n    itemPerPage: number;\n    totalItem: number;\n    currentPage: number;\n    totalPage: number;\n  };\n\n  links: {\n    linkLastPage: string;\n    linkFirstPage: string;\n    linkNextPage: string;\n    linkPreviousPage: string;\n    linkCurrentPage: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationProvider } from './providers/pagination-provider';\n\n@Module({\n  providers: [PaginationProvider],\n  exports: [PaginationProvider],\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/providers/pagination-provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                paginatedQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(req: Request)\n                    \n                \n                        \n                            \n                                Defined in src/common/pagination/providers/pagination-provider.ts:9\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        paginatedQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginatedQuery(queryPagination: PaginationQueryDto, repository: Repository)\n                \n            \n\n\n                    \n                        \n                            Defined in src/common/pagination/providers/pagination-provider.ts:23\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        pagination query\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryPagination\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dtos/query-pagination.dto';\nimport { ObjectLiteral, Repository } from 'typeorm';\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n  /**\n   * constructor\n   */\n  constructor(\n    /**\n     * inject request\n     */\n    @Inject(REQUEST) private readonly req: Request,\n  ) {}\n\n  /**\n   * pagination query\n   */\n  public async paginatedQuery(\n    queryPagination: PaginationQueryDto,\n    repository: Repository,\n  ): Promise> {\n    const result = await repository.find({\n      take: queryPagination.limit,\n      skip: (queryPagination.page - 1) * queryPagination.limit,\n    });\n\n    // base URL\n    const url = this.req.protocol + '://' + this.req.headers.host + '/';\n    const newUrl = new URL(this.req.url, url);\n\n    //  calculate number page\n    const totalEntity: number = await repository.count();\n    const totalPage: number = Math.ceil(totalEntity / queryPagination.limit);\n\n    const nextPage: number =\n      queryPagination.page === totalPage\n        ? queryPagination.page\n        : queryPagination.page + 1;\n\n    const prePage: number =\n      queryPagination.page === 1\n        ? queryPagination.page\n        : queryPagination.page - 1;\n\n    console.log(newUrl);\n    // final result\n    const fialRespone: Paginated = {\n      data: result,\n      meta: {\n        itemPerPage: queryPagination.limit,\n        currentPage: queryPagination.page,\n        totalItem: totalEntity,\n        totalPage: totalPage,\n      },\n      links: {\n        linkCurrentPage: `${newUrl.origin}${newUrl.pathname}?page=${queryPagination.page}&limit=${queryPagination.limit}`,\n        linkFirstPage: `${newUrl.origin}${newUrl.pathname}?page=1&limit=${queryPagination.limit}`,\n        linkLastPage: `${newUrl.origin}${newUrl.pathname}?page=${totalPage}&limit=${queryPagination.limit}`,\n        linkNextPage: `${newUrl.origin}${newUrl.pathname}?page=${nextPage}&limit=${queryPagination.limit}`,\n        linkPreviousPage: `${newUrl.origin}${newUrl.pathname}?page=${prePage}&limit=${queryPagination.limit}`,\n      },\n    };\n\n    return fialRespone;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/pagination/dtos/query-pagination.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@IsPositive()@Min(1)@Max(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/query-pagination.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsInt()@IsPositive()@Min(1)@Max(100)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/pagination/dtos/query-pagination.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from 'class-transformer';\nimport { IsInt, IsOptional, IsPositive, Max, Min } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @IsOptional()\n  @IsInt()\n  @IsPositive()\n  @Min(1)\n  @Max(100)\n  limit?: number = 10;\n\n  @IsOptional()\n  @IsInt()\n  @IsPositive()\n  @Min(1)\n  @Max(100)\n  page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'id post you must provide to'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './create-post.dto';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'id post you must provide to',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featureImgUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featureImgUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, MetaOption => MetaOption.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: false, unique: true, length: 256})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         statusType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: statusType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { postType } from './enums/postType.enum';\nimport { statusType } from './enums/statusType.enum';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 100,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'varchar',\n    length: 100,\n    nullable: false,\n  })\n  description: string;\n\n  @Column({\n    type: 'enum',\n    enum: postType,\n    nullable: false,\n    default: postType.POST,\n  })\n  postType: postType;\n\n  @Column({\n    type: 'varchar',\n    nullable: false,\n    unique: true,\n    length: 256,\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum: statusType,\n    nullable: false,\n    default: statusType.DRAFT,\n  })\n  status: statusType;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featureImgUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  publishOn?: Date;\n\n  @OneToOne(() => MetaOption, (MetaOption) => MetaOption.post, {\n    cascade: true, // this meant all thing we do on main entity will automically change on entity relate with it\n    eager: true, // auto get data of enity it relate\n  })\n  metaOptions?: MetaOption;\n\n  @ManyToOne(() => User, (user) => user.posts, {\n    eager: true,\n    onDelete: 'CASCADE',\n  })\n  author: User;\n\n  @ManyToMany(() => Tag, (tag) => tag.posts, {\n    eager: true,\n  })\n  @JoinTable()\n  tags?: Tag[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                getAllPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPosts(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'create a new post'})@ApiResponse({status: 201, description: 'create a new post successfull'})@Post('/create')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:87\n                        \n                    \n\n\n            \n                \n                        [POST] /posts/create\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'delete a post'})@ApiResponse({status: 200, description: 'delete a post successfull'})@Delete('/delete')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:130\n                        \n                    \n\n\n            \n                \n                        [DELETE] /posts/delete\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        getAllPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPost()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'get all posts'})@ApiResponse({status: 200, description: 'get all post success when status = 200'})@Get('/get/all')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:102\n                        \n                    \n\n\n            \n                \n                        [GET] /posts\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: number, postQuery: GetPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'get all post by author id'})@ApiResponse({status: 200, description: 'get all post success'})@ApiParam({name: 'userId', type: 'number', description: 'author id', example: '1'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'number entity in a page', example: '2'})@ApiQuery({name: 'page', type: 'number', required: false, description: 'page number', example: '1'})@Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        [GET] /posts/:userId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(updatePatchDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'update post properties'})@ApiResponse({status: 200, description: 'update successfully'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updatePatchDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\nimport { GetPostDto } from './dtos/get-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts') // set up group API name in swagger\nexport class PostsController {\n  /**\n   *contructor\n   */\n  constructor(\n    /**\n     *  inject post service\n     */\n    private readonly postsService: PostsService,\n  ) {}\n\n  /**\n   * # [GET] /posts/:userId\n   */\n\n  @ApiOperation({\n    summary: 'get all post by author id',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'get all post success',\n  })\n  @ApiParam({\n    name: 'userId',\n    type: 'number',\n    description: 'author id',\n    example: '1',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'number entity in a page',\n    example: '2',\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'page number',\n    example: '1',\n  })\n  @Get('/:userId?')\n  public getPosts(\n    @Param('userId') userId: number,\n    @Query() postQuery: GetPostDto,\n  ) {\n    return this.postsService.getAllPostByUserId(userId, postQuery);\n  }\n\n  /**\n   * # [POST] /posts/create\n   */\n  @ApiOperation({\n    summary: 'create a new post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'create a new post successfull',\n  })\n  @Post('/create')\n  public createPosts(@Body() createPostDto: CreatePostDto): any {\n    return this.postsService.createPost(createPostDto);\n  }\n\n  /**\n   * # [GET] /posts\n   */\n  @ApiOperation({\n    summary: 'get all posts',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'get all post success when status = 200',\n  })\n  @Get('/get/all')\n  public getAllPost() {\n    return this.postsService.getAllPost();\n  }\n\n  // # [PATCH] /posts/\n  @ApiOperation({\n    summary: 'update post properties',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'update successfully',\n  })\n  @Patch()\n  public updatePost(@Body() updatePatchDto: PatchPostDto) {\n    return this.postsService.updatePost(updatePatchDto);\n  }\n\n  /**\n   * # [DELETE] /posts/delete\n   */\n  @ApiOperation({\n    summary: 'delete a post',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'delete a post successfull',\n  })\n  @Delete('/delete')\n  public deletePost(@Query('id', ParseIntPipe) id: number) {\n    return this.postsService.deletePost(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { TagsModule } from 'src/tags/tags.module';\nimport { PaginationModule } from 'src/common/pagination/pagination.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [\n    UsersModule,\n    TagsModule,\n    TypeOrmModule.forFeature([Post, MetaOption]),\n    PaginationModule,\n  ],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n            \n                Description\n            \n            \n                post service contain method relate to service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                    Async\n                                deletePost\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPost\n                            \n                            \n                                    Public\n                                    Async\n                                getAllPostByUserId\n                            \n                            \n                                    Public\n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, postRepo: Repository, metaOptionRepo: Repository, tagService: TagsService, paginationProvider: PaginationProvider)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:26\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagService\n                                                  \n                                                        \n                                                                        TagsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        paginationProvider\n                                                  \n                                                        \n                                                                        PaginationProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:59\n                        \n                    \n\n\n            \n                \n                        create a new post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:124\n                        \n                    \n\n\n            \n                \n                        delete a post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPost()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:115\n                        \n                    \n\n\n            \n                \n                        get all post\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getAllPostByUserId\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPostByUserId(id: number, postQuery: GetPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:79\n                        \n                    \n\n\n            \n                \n                        get all post by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                postQuery\n                                            \n                                                            GetPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(newPost: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:149\n                        \n                    \n\n\n            \n                \n                        update post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newPost\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Body,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { CreatePostDto } from '../dtos/create-post.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { MetaOption } from 'src/meta-options/meta-option.entity';\nimport { Repository } from 'typeorm';\nimport { UserService } from 'src/users/providers/users.service';\nimport { Post } from '../post.entity';\nimport { User } from 'src/users/user.entity';\nimport { TagsService } from 'src/tags/providers/tags.service';\nimport { Tag } from 'src/tags/tag.entity';\nimport { PatchPostDto } from '../dtos/patch-post.dto';\nimport { ConfigService } from '@nestjs/config';\nimport { GetPostDto } from '../dtos/get-post.dto';\nimport { PaginationProvider } from 'src/common/pagination/providers/pagination-provider';\nimport { Paginated } from 'src/common/pagination/interfaces/paginated.interface';\n/**\n * post service contain method relate to service\n */\n@Injectable()\nexport class PostsService {\n  /**\n   * constructor\n   */\n  constructor(\n    /**\n     * inject user service\n     */\n    private readonly userService: UserService,\n\n    /**\n     * inject repositoyr of post\n     */\n    @InjectRepository(Post)\n    private readonly postRepo: Repository,\n    /**\n     * inject repository of metaOption\n     */\n    @InjectRepository(MetaOption)\n    private readonly metaOptionRepo: Repository,\n    /**\n     * inject tag service\n     */\n    private readonly tagService: TagsService,\n    /**\n     * inject pagination provider\n     */\n    private readonly paginationProvider: PaginationProvider,\n  ) {}\n\n  /**\n   * create a new post\n   */\n  public async createPost(createPostDto: CreatePostDto): Promise {\n    // find author\n    const author: User = await this.userService.findOne(createPostDto.authorId);\n\n    // get all tag\n    const tags: Tag[] = await this.tagService.getMultipTag(createPostDto.tags);\n\n    // create post\n    let newPostRecord: Post = this.postRepo.create({\n      ...createPostDto,\n      tags: tags,\n      author: author,\n    });\n\n    return await this.postRepo.save(newPostRecord);\n  }\n\n  /**\n   * get all post by id\n   */\n  public async getAllPostByUserId(\n    id: number,\n    postQuery: GetPostDto,\n  ): Promise> {\n    // let posts = await this.postRepo.find(\n    //   {\n    //     where: {\n    //       author: {\n    //         id: id,\n    //       },\n    //     },\n    //     take: postQuery.limit,\n    //     skip: (postQuery.page - 1) * postQuery.limit,\n    //   },\n\n    // relations: {\n    //   metaOptions: true,\n    //   author: true,\n    //   tags: true,\n    // },\n    // );\n\n    const posts = await this.paginationProvider.paginatedQuery(\n      {\n        limit: postQuery.limit,\n        page: postQuery.page,\n      },\n      this.postRepo,\n    );\n\n    return posts;\n  }\n\n  /**\n   * get all post\n   */\n  public async getAllPost(): Promise {\n    let posts = await this.postRepo.find();\n\n    return posts;\n  }\n\n  /**\n   * delete a post\n   */\n  public async deletePost(id: number) {\n    // find the post\n    let thePost = undefined;\n    try {\n      thePost = await this.postRepo.delete(id);\n    } catch (error) {\n      throw new RequestTimeoutException('Something wrong try another time', {\n        description: 'Can not connect to db',\n      });\n    }\n\n    if (thePost.affected === 0) {\n      throw new BadRequestException('Can not delete id is incorrect', {\n        description: 'id is in correct',\n      });\n    }\n    return {\n      deleted: true,\n      id: id,\n    };\n  }\n\n  /**\n   * update post\n   */\n  public async updatePost(newPost: PatchPostDto) {\n    let tags: Tag[] = undefined;\n    try {\n      // find the tags\n      tags = await this.tagService.getMultipTag(newPost.tags);\n    } catch (error) {\n      throw new RequestTimeoutException('Something wrong try another time', {\n        description: 'Can not connect to db',\n      });\n    }\n\n    // tag id is not exist\n    if (!tags || tags.length != newPost.tags.length) {\n      throw new BadRequestException('tag does not exist', {\n        description: 'tag id was not corect',\n      });\n    }\n\n    // find the post\n    let thePost: Post = undefined;\n\n    try {\n      thePost = await this.postRepo.findOneBy({ id: newPost.id });\n    } catch (error) {\n      throw new RequestTimeoutException('Something wrong try another time', {\n        description: 'Can not connect to db',\n      });\n    }\n\n    // post does not exist\n    if (!thePost) {\n      throw new BadRequestException('post does not exist', {\n        description: 'post id was not corect',\n      });\n    }\n\n    //update the post\n    thePost.title = newPost.title ?? thePost.title;\n    thePost.status = newPost.status ?? thePost.status;\n    thePost.content = newPost.content ?? thePost.content;\n    thePost.slug = newPost.slug ?? thePost.slug;\n    thePost.postType = newPost.postType ?? thePost.postType;\n    thePost.featureImgUrl = newPost.featureImgUrl ?? thePost.featureImgUrl;\n    thePost.publishOn = newPost.publishOn ?? thePost.publishOn;\n    // assign a new tag to the post\n    thePost.tags = tags;\n    // save and return the post\n\n    try {\n      return await this.postRepo.save(thePost);\n    } catch (error) {\n      throw new RequestTimeoutException('Something wrong try another time', {\n        description: 'Can not connect to db',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInDto.html":{"url":"classes/SignInDto.html","title":"class - SignInDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/singin.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'email', example: 'toan@gmail.com'})@IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/singin.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'enter password', example: '1234567a'})@IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/singin.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class SignInDto {\n  @ApiProperty({\n    description: 'email',\n    example: 'toan@gmail.com',\n  })\n  @IsNotEmpty()\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({\n    description: 'enter password',\n    example: '1234567a',\n  })\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SigninProvider.html":{"url":"injectables/SigninProvider.html","title":"injectable - SigninProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SigninProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/signin.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                signin\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/signin.provider.ts:7\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        signin\n                        \n                    \n                \n            \n            \n                \n                        \n                    signin(signinDto: SignInDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/signin.provider.ts:22\n                        \n                    \n\n\n            \n                \n                        signin method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                signinDto\n                                            \n                                                            SignInDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/users.service';\nimport { User } from 'src/users/user.entity';\nimport { SignInDto } from '../dtos/singin.dto';\n\n@Injectable()\nexport class SigninProvider {\n  /**\n   * constructor\n   */\n  constructor(\n    /**\n     * inject user service\n     */\n    @Inject(forwardRef(() => UserService))\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * signin method\n   */\n  public async signin(signinDto: SignInDto) {\n    // check user exist by email\n    const user: User = await this.userService.getUserByEmail(signinDto.email);\n\n    return 'hello';\n    // check password\n    // match password\n    // return token\n    // not match password\n    // return status\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImgUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImgUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:61\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  Entity,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n@Entity()\nexport class Tag {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 256,\n    nullable: false,\n    unique: true,\n  })\n  name: string;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique: true,\n  })\n  slug: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  description?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    length: 1024,\n    nullable: true,\n  })\n  featuredImgUrl?: string;\n\n  @ManyToMany(() => Post, (post) => post.tags, {\n    onDelete: 'CASCADE',\n  }) // convert to bidirectional relationship\n  posts: Post[];\n\n  @CreateDateColumn()\n  createDate: Date;\n\n  @UpdateDateColumn()\n  updateDate: Date;\n\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createTag\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                deleteTag\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(newTag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'create a new tag'})@ApiResponse({status: 201, description: 'create tag success'})@Post('/create')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        create new tag\n[POST] /tags/create\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newTag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(idTag: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'delete a tag'})@ApiResponse({status: 200, description: 'delete a tag successfully when code = 200'})@Delete('/delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:55\n                        \n                    \n\n\n            \n                \n                        delete a tag\n[DELETE] /tags/delete\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idTag\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(idTag: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'soft delete tag'})@ApiResponse({status: 200, description: 'delete soft success'})@Delete('/soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:71\n                        \n                    \n\n\n            \n                \n                        soft delete\n#[DELETE] /tags/soft-delete\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                idTag\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  ParseIntPipe,\n  Post,\n  Query,\n} from '@nestjs/common';\nimport { TagsService } from './providers/tags.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { Tag } from './tag.entity';\n\n@Controller('tags')\n@ApiTags('Tags')\nexport class TagsController {\n  /**\n   * constructor\n   */\n  constructor(\n    /**\n     * inject tag service\n     */\n    private readonly tagService: TagsService,\n  ) {}\n\n  /**\n   * create new tag\n   * # [POST] /tags/create\n   */\n  @ApiOperation({\n    summary: 'create a new tag',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'create tag success',\n  })\n  @Post('/create')\n  public createTag(@Body() newTag: CreateTagDto): Promise {\n    return this.tagService.createTag(newTag);\n  }\n\n  /**\n   * delete a tag\n   * # [DELETE] /tags/delete\n   */\n  @ApiOperation({\n    summary: 'delete a tag',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'delete a tag successfully when code = 200',\n  })\n  @Delete('/delete')\n  public deleteTag(@Query('id', ParseIntPipe) idTag: number) {\n    return this.tagService.deleteTag(idTag);\n  }\n\n  /**\n   * soft delete\n   * #[DELETE] /tags/soft-delete\n   */\n  @ApiOperation({\n    summary: 'soft delete tag',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'delete soft success',\n  })\n  @Delete('/soft-delete')\n  public softDelete(@Query('id', ParseIntPipe) idTag: number) {\n    return this.tagService.softDeleteTag(idTag);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagsService \n\nTagsService \n\n\n\nTagsModule\n\nTagsModule\n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\n\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagsService } from './providers/tags.service';\n\n@Module({\n  controllers: [TagsController],\n  providers: [TagsService],\n  imports: [TypeOrmModule.forFeature([Tag])],\n  exports: [TagsService],\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagsService.html":{"url":"injectables/TagsService.html","title":"injectable - TagsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tags.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTag\n                            \n                            \n                                    Public\n                                    Async\n                                deleteTag\n                            \n                            \n                                    Public\n                                    Async\n                                getMultipTag\n                            \n                            \n                                    Public\n                                    Async\n                                getTag\n                            \n                            \n                                    Public\n                                    Async\n                                softDeleteTag\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepo: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tags.service.ts:11\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(newTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:25\n                        \n                    \n\n\n            \n                \n                        create a new tag\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        deleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTag(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:54\n                        \n                    \n\n\n            \n                \n                        delete a tag\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getMultipTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMultipTag(ids: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:41\n                        \n                    \n\n\n            \n                \n                        get multiple tag\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                ids\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTag(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:34\n                        \n                    \n\n\n            \n                \n                        get tag by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDeleteTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDeleteTag(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tags.service.ts:66\n                        \n                    \n\n\n            \n                \n                        soft delete\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Tag } from '../tag.entity';\nimport { In, Repository } from 'typeorm';\nimport { CreateTagDto } from '../dtos/create-tag.dto';\n\n@Injectable()\n/**\n * clas tag service\n */\nexport class TagsService {\n  /**\n   * constructor\n   */\n  constructor(\n    /**\n     * inject tag repository\n     */\n    @InjectRepository(Tag) private readonly tagRepo: Repository,\n  ) {}\n\n  /**\n   * create a new tag\n   */\n  public async createTag(newTagDto: CreateTagDto): Promise {\n    const newTagRecord: Tag = this.tagRepo.create(newTagDto);\n\n    return await this.tagRepo.save(newTagRecord);\n  }\n\n  /**\n   * get tag by id\n   */\n  public async getTag(id: number) {\n    return await this.tagRepo.findOneBy({ id: id });\n  }\n\n  /**\n   * get multiple tag\n   */\n  public async getMultipTag(ids: number[]): Promise {\n    let tags = await this.tagRepo.find({\n      where: {\n        id: In(ids),\n      },\n    });\n\n    return tags;\n  }\n\n  /**\n   *delete a tag\n   */\n  public async deleteTag(id: number) {\n    await this.tagRepo.delete(id);\n\n    return {\n      deleted: true,\n      id: id,\n    };\n  }\n\n  /**\n   * soft delete\n   */\n  public async softDeleteTag(id: number) {\n    await this.tagRepo.softDelete(id);\n    return {\n      deleted: true,\n      id: id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author, {cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from 'src/posts/post.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  firstName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: true,\n  })\n  lastName: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n    unique: true,\n  })\n  email: string;\n\n  @Column({\n    type: 'varchar',\n    length: 96,\n    nullable: false,\n  })\n  password: string;\n\n  @OneToMany(() => Post, (post) => post.author, {\n    cascade: true,\n  })\n  posts: Post[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateManyProvider.html":{"url":"injectables/UserCreateManyProvider.html","title":"injectable - UserCreateManyProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateManyProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user-create-many.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMultip\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user-create-many.provider.ts:13\n                            \n                        \n\n                \n                    \n                            constructor\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMultip\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMultip(createUSersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user-create-many.provider.ts:28\n                        \n                    \n\n\n            \n                \n                        create many user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUSersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  ConflictException,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { DataSource } from 'typeorm';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\n\n@Injectable()\nexport class UserCreateManyProvider {\n  /**\n   * constructor\n   */\n  constructor(\n    /**\n     * inject data source\n     */\n    private readonly dataSource: DataSource,\n  ) {}\n\n  /**\n   * create many user\n   */\n\n  public async createMultip(createUSersDto: CreateManyUsersDto) {\n    let users: User[] = [];\n\n    // create query runner\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    try {\n      // connect to db sourse\n      await queryRunner.connect();\n\n      // start transaction\n      await queryRunner.startTransaction();\n    } catch (error) {\n      throw new RequestTimeoutException('Something wrong try later');\n    }\n\n    try {\n      for (const user of createUSersDto.users) {\n        const newUser: User = queryRunner.manager.create(User, user);\n        const result: User = await queryRunner.manager.save(newUser);\n        users.push(result);\n      }\n\n      // commit if success\n      await queryRunner.commitTransaction();\n    } catch (error) {\n      // rollback if failed\n      await queryRunner.rollbackTransaction();\n      throw new ConflictException('email aready exist', {\n        description: String(error),\n      });\n    } finally {\n      try {\n        // release\n        await queryRunner.release();\n      } catch (error) {\n        throw new RequestTimeoutException('Could not release', {\n          description: String(error),\n        });\n      }\n    }\n\n    return users;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserCreateProvider.html":{"url":"injectables/UserCreateProvider.html","title":"injectable - UserCreateProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserCreateProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user-create.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepo: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user-create.provider.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(newUser: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user-create.provider.ts:33\n                        \n                    \n\n\n            \n                \n                        create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newUser\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { User } from '../user.entity';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { BryptProvider } from 'src/auth/providers/brypt.provider';\nimport { HashingProvider } from 'src/auth/providers/hashing.provider';\n\n@Injectable()\nexport class UserCreateProvider {\n  constructor(\n    /**\n     * inject user repository\n     */\n    @InjectRepository(User)\n    private readonly userRepo: Repository,\n    /**\n     * inject brypt service\n     */\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingProvider: HashingProvider,\n  ) {}\n\n  /**\n   * create a new user\n   */\n  public async createUser(newUser: CreateUserDto): Promise {\n    // check user exist\n    let existUser: User = undefined;\n\n    try {\n      existUser = await this.userRepo.findOne({\n        where: {\n          email: newUser.email,\n        },\n      });\n    } catch (error) {\n      throw new RequestTimeoutException('Please try later something wrong', {\n        description: 'Error connect to database',\n      });\n    }\n\n    // handle exception duplicate email\n    if (existUser) {\n      throw new BadRequestException('Email already exist', {\n        description: 'User already exist try another email',\n      });\n    }\n\n    //create a new user\n    try {\n      let newUserData: User = this.userRepo.create({\n        ...newUser,\n        password: await this.hashingProvider.hashPassword(newUser.password),\n      });\n      newUserData = await this.userRepo.save(newUserData);\n      return newUserData;\n    } catch (error) {\n      throw new RequestTimeoutException('something wrong please try later', {\n        description: 'can not connect to server',\n      });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                user service contain methods relate to user\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createMultip\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                findOne\n                            \n                            \n                                    Public\n                                    Async\n                                getUserByEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepo: Repository, configProfile: ConfigType<>, userCreatManyProvider: UserCreateManyProvider, userCreate: UserCreateProvider, findUserByEmailProvider: FindUserByEmailProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:27\n                            \n                        \n\n                \n                    \n                            contructor inject AuthService dependency\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configProfile\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userCreatManyProvider\n                                                  \n                                                        \n                                                                        UserCreateManyProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userCreate\n                                                  \n                                                        \n                                                                        UserCreateProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        findUserByEmailProvider\n                                                  \n                                                        \n                                                                        FindUserByEmailProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createMultip\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMultip(createUSersDto: CreateManyUsersDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:115\n                        \n                    \n\n\n            \n                \n                        create many user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUSersDto\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(newUser: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:65\n                        \n                    \n\n\n            \n                \n                        create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newUser\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUserParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:72\n                        \n                    \n\n\n            \n                \n                        get all user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:94\n                        \n                    \n\n\n            \n                \n                        find one user by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        getUserByEmail\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUserByEmail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:124\n                        \n                    \n\n\n            \n                \n                        get a user by email\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  forwardRef,\n  HttpException,\n  HttpStatus,\n  Inject,\n  Injectable,\n  RequestTimeoutException,\n} from '@nestjs/common';\nimport { GetUserParamDto } from '../dtos/get-users-params.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from '../user.entity';\nimport { DataSource, Repository } from 'typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\nimport { ConfigType } from '@nestjs/config';\nimport profileConfig from '../config/profile.config';\nimport { UserCreateManyProvider } from './user-create-many.provider';\nimport { CreateManyUsersDto } from '../dtos/create-many-users.dto';\nimport { UserCreateProvider } from './user-create.provider';\nimport { FindUserByEmailProvider } from './find-user-by-email.provider';\n\n/**\n * user service contain methods relate to user\n */\n@Injectable()\nexport class UserService {\n  /**\n   * contructor inject AuthService dependency\n   */\n  constructor(\n    /**\n     * inject auth service\n     */\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    /**\n     * inject repository user\n     */\n    @InjectRepository(User) private readonly userRepo: Repository,\n\n    /**\n     *\n     */\n    @Inject(profileConfig.KEY)\n    private readonly configProfile: ConfigType,\n    /**\n     * inject userCreateManyProvider\n     */\n    private readonly userCreatManyProvider: UserCreateManyProvider,\n    /**\n     * inject user create provider\n     */\n    private readonly userCreate: UserCreateProvider,\n    /**\n     * inject find user by email provider\n     */\n    private readonly findUserByEmailProvider: FindUserByEmailProvider,\n  ) {}\n\n  /**\n   * create a new user\n   */\n  public async createUser(newUser: CreateUserDto): Promise {\n    return await this.userCreate.createUser(newUser);\n  }\n\n  /**\n   * get all user\n   */\n  public findAll(\n    getUserParamDto: GetUserParamDto,\n    limit: number,\n    page: number,\n  ) {\n    throw new HttpException(\n      {\n        status: HttpStatus.METHOD_NOT_ALLOWED,\n        error: 'API does not exist',\n        fileName: 'users.service.ts',\n        line: 93,\n      },\n      HttpStatus.METHOD_NOT_ALLOWED,\n      {\n        description: 'Api is not exist',\n      },\n    );\n  }\n\n  /**\n   * find one user by id\n   */\n  public async findOne(id: number): Promise {\n    let theUser: User = undefined;\n    try {\n      theUser = await this.userRepo.findOneBy({ id: id });\n    } catch (error) {\n      throw new RequestTimeoutException('something wrong please try later', {\n        description: 'can not connect to server',\n      });\n    }\n\n    if (!theUser) {\n      throw new BadRequestException('Your request is invalid', {\n        description: 'id is not exist',\n      });\n    }\n    return theUser;\n  }\n\n  /**\n   * create many user\n   */\n  public async createMultip(\n    createUSersDto: CreateManyUsersDto,\n  ): Promise {\n    return await this.userCreatManyProvider.createMultip(createUSersDto);\n  }\n\n  /**\n   * get a user by email\n   */\n  public async getUserByEmail(email: string): Promise {\n    return await this.findUserByEmailProvider.getUserByEmail(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createManyUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                test\n                            \n                            \n                                    \n                                    Public\n                                test3\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createManyUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createManyUsers(newUserArray: CreateManyUsersDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'create many users'})@ApiResponse({status: 201, description: 'when create a new user success code 201 will be return'})@Post('/create/many')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:97\n                        \n                    \n\n\n            \n                \n                        create many user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newUserArray\n                                            \n                                                            CreateManyUsersDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(newUSer: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'create new user'})@ApiResponse({status: 201, description: 'when create a new user success code 201 will be return'})@Post('create')\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                newUSer\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        test\n                        \n                    \n                \n            \n            \n                \n                        \n                    test(getUserParamDto: GetUserParamDto, limit: number | undefined, page: number | undefined)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'get a list of users from list'})@ApiResponse({status: 200, description: 'Sucessfully'})@ApiQuery({name: 'limit', type: 'number', required: false, description: 'number of return data', example: 10})@ApiQuery({name: 'page', type: 'number', required: false, description: 'enter the nth page', example: 2})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n                        example of API swagger\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUserParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                        number | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                        number | undefined\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        test3\n                        \n                    \n                \n            \n            \n                \n                        \n                    test3(body: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:105\n                        \n                    \n\n\n            \n                \n                        test method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  DefaultValuePipe,\n  Get,\n  Headers,\n  Ip,\n  Param,\n  ParseIntPipe,\n  Patch,\n  Post,\n  Query,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUserParamDto } from './dtos/get-users-params.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UserService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { User } from './user.entity';\nimport { CreateManyUsersDto } from './dtos/create-many-users.dto';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  /**\n   * constructor\n   */\n  constructor(\n    /**\n     * inject user service\n     */\n    private readonly userService: UserService,\n  ) {}\n\n  /**\n   * example of API swagger\n   */\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'get a list of users from list',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Sucessfully',\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: 'number',\n    required: false,\n    description: 'number of return data',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: 'number',\n    required: false,\n    description: 'enter the nth page',\n    example: 2,\n  })\n  public test(\n    @Param() getUserParamDto: GetUserParamDto,\n    @Query('limit', new DefaultValuePipe(99), ParseIntPipe)\n    limit: number | undefined,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe)\n    page: number | undefined,\n  ) {\n    return this.userService.findAll(getUserParamDto, limit, page);\n  }\n\n  /**\n   * create a new user\n   */\n  @ApiOperation({\n    summary: 'create new user',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'when create a new user success code 201 will be return',\n  })\n  @Post('create')\n  public createUser(@Body() newUSer: CreateUserDto): Promise {\n    return this.userService.createUser(newUSer);\n  }\n\n  /**\n   * create many user\n   */\n  @ApiOperation({\n    summary: 'create many users',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'when create a new user success code 201 will be return',\n  })\n  @Post('/create/many')\n  public createManyUsers(@Body() newUserArray: CreateManyUsersDto) {\n    return this.userService.createMultip(newUserArray);\n  }\n\n  /**\n   * test method\n   */\n  @Patch()\n  public test3(@Body() body: PatchUserDto) {\n    console.log(body);\n    return body;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nFindUserByEmailProvider\n\nFindUserByEmailProvider\n\nUsersModule -->\n\nFindUserByEmailProvider->UsersModule\n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserCreateProvider\n\nUserCreateProvider\n\nUsersModule -->\n\nUserCreateProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FindUserByEmailProvider\n                        \n                        \n                            UserCreateManyProvider\n                        \n                        \n                            UserCreateProvider\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\nimport { ConfigModule } from '@nestjs/config';\nimport { UserCreateManyProvider } from './providers/user-create-many.provider';\nimport { UserCreateProvider } from './providers/user-create.provider';\nimport { FindUserByEmailProvider } from './providers/find-user-by-email.provider';\nimport profileConfig from './config/profile.config';\n\n@Module({\n  controllers: [UsersController],\n  providers: [\n    UserService,\n    UserCreateManyProvider,\n    UserCreateProvider,\n    FindUserByEmailProvider,\n  ],\n  exports: [UserService],\n  imports: [\n    forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n    ConfigModule.forFeature(profileConfig),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            ENV\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/singin.dto.ts\n            \n            class\n            SignInDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/providers/brypt.provider.ts\n            \n            injectable\n            BryptProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/auth/providers/signin.provider.ts\n            \n            injectable\n            SigninProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/common/pagination/dtos/query-pagination.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/pagination/providers/pagination-provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/post-metaOption.dto.ts\n            \n            class\n            MetaOptionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-option.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/meta-options/providers/meta-option.service.ts\n            \n            injectable\n            MetaOptionService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-post.dto.ts\n            \n            class\n            GetPostBaseDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/get-post.dto.ts\n            \n            class\n            GetPostDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tags.service.ts\n            \n            injectable\n            TagsService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-many-users.dto.ts\n            \n            class\n            CreateManyUsersDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-params.dto.ts\n            \n            class\n            GetUserParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/find-user-by-email.provider.ts\n            \n            injectable\n            FindUserByEmailProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/users/providers/user-create-many.provider.ts\n            \n            injectable\n            UserCreateManyProvider\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/users/providers/user-create.provider.ts\n            \n            injectable\n            UserCreateProvider\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                80 %\n                (4/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.13.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                        \n                            statusType   (src/.../statusType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/posts/enums/statusType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        statusType\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\nHashingProvider  -->\n\nAuthModule->HashingProvider \n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nPaginationModule->PostsModule\n\n\n\nAppModule -->\n\nPaginationModule->AppModule\n\n\n\n\n\nPaginationProvider \n\nPaginationProvider \n\nPaginationProvider  -->\n\nPaginationModule->PaginationProvider \n\n\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostsModule -->\n\nTagsModule->PostsModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagsService \n\nTagsService \n\nTagsService  -->\n\nTagsModule->TagsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nSigninProvider\n\nSigninProvider\n\nAuthModule -->\n\nSigninProvider->AuthModule\n\n\n\n\n\nMetaOptionService\n\nMetaOptionService\n\nMetaOptionsModule -->\n\nMetaOptionService->MetaOptionsModule\n\n\n\n\n\nPaginationProvider\n\nPaginationProvider\n\nPaginationModule -->\n\nPaginationProvider->PaginationModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagsService\n\nTagsService\n\nTagsModule -->\n\nTagsService->TagsModule\n\n\n\n\n\nFindUserByEmailProvider\n\nFindUserByEmailProvider\n\nUsersModule -->\n\nFindUserByEmailProvider->UsersModule\n\n\n\n\n\nUserCreateManyProvider\n\nUserCreateManyProvider\n\nUsersModule -->\n\nUserCreateManyProvider->UsersModule\n\n\n\n\n\nUserCreateProvider\n\nUserCreateProvider\n\nUsersModule -->\n\nUserCreateProvider->UsersModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
